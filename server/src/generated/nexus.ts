/**
 * This file was automatically generated by GraphQL Nexus
 * Do not make changes to this file directly
 */

import * as Context from "../context"
import * as client from "@prisma/client"



declare global {
  interface NexusGenCustomOutputProperties<TypeName extends string> {
    crud: NexusPrisma<TypeName, 'crud'>
    model: NexusPrisma<TypeName, 'model'>
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenRootTypes {
  AuthPayload: { // root type
    token: string; // String!
    user: NexusGenRootTypes['punbb_users']; // punbb_users!
  }
  Mutation: {};
  Query: {};
  punbb_forums: client.punbb_forums;
  punbb_posts: client.punbb_posts;
  punbb_topics: client.punbb_topics;
  punbb_users: client.punbb_users;
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
}

export interface NexusGenFieldTypes {
  AuthPayload: { // field return type
    token: string; // String!
    user: NexusGenRootTypes['punbb_users']; // punbb_users!
  }
  Mutation: { // field return type
    login: NexusGenRootTypes['AuthPayload']; // AuthPayload!
  }
  Query: { // field return type
    forums: NexusGenRootTypes['punbb_forums'][]; // [punbb_forums!]!
    me: NexusGenRootTypes['punbb_users'] | null; // punbb_users
    searchPosts: NexusGenRootTypes['punbb_posts'][]; // [punbb_posts!]!
    topics: NexusGenRootTypes['punbb_topics'][]; // [punbb_topics!]!
  }
  punbb_forums: { // field return type
    forum_desc: string | null; // String
    forum_name: string; // String!
    id: number; // Int!
  }
  punbb_posts: { // field return type
    edited: number | null; // Int
    edited_by: string | null; // String
    id: number; // Int!
    message: string; // String!
    posted: number; // Int!
    poster_id: number; // Int!
  }
  punbb_topics: { // field return type
    closed: boolean; // Boolean!
    forum_id: number; // Int!
    id: number; // Int!
    last_post: number; // Int!
    last_post_id: number; // Int!
    last_poster: string | null; // String
    posted: number; // Int!
    poster: string; // String!
    sticky: boolean; // Boolean!
    subject: string; // String!
  }
  punbb_users: { // field return type
    id: number; // Int!
    last_post: number | null; // Int
    last_visit: number; // Int!
    registered: number; // Int!
    signature: string | null; // String
    username: string; // String!
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    login: { // args
      password: string; // String!
      username: string; // String!
    }
  }
  Query: {
    searchPosts: { // args
      searchString?: string | null; // String
    }
    topics: { // args
      forum_id: number; // Int!
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = "AuthPayload" | "Mutation" | "Query" | "punbb_forums" | "punbb_posts" | "punbb_topics" | "punbb_users";

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = "Boolean" | "Float" | "ID" | "Int" | "String";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: Context.Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
}