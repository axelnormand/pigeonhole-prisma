// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  punbbBan: (where?: PunbbBanWhereInput) => Promise<boolean>;
  punbbCategory: (where?: PunbbCategoryWhereInput) => Promise<boolean>;
  punbbForum: (where?: PunbbForumWhereInput) => Promise<boolean>;
  punbbOnline: (where?: PunbbOnlineWhereInput) => Promise<boolean>;
  punbbPost: (where?: PunbbPostWhereInput) => Promise<boolean>;
  punbbTopic: (where?: PunbbTopicWhereInput) => Promise<boolean>;
  punbbUploaded: (where?: PunbbUploadedWhereInput) => Promise<boolean>;
  punbbUser: (where?: PunbbUserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  punbbBan: (where: PunbbBanWhereUniqueInput) => PunbbBanNullablePromise;
  punbbBans: (args?: {
    where?: PunbbBanWhereInput;
    orderBy?: PunbbBanOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<PunbbBan>;
  punbbBansConnection: (args?: {
    where?: PunbbBanWhereInput;
    orderBy?: PunbbBanOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PunbbBanConnectionPromise;
  punbbCategory: (
    where: PunbbCategoryWhereUniqueInput
  ) => PunbbCategoryNullablePromise;
  punbbCategories: (args?: {
    where?: PunbbCategoryWhereInput;
    orderBy?: PunbbCategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<PunbbCategory>;
  punbbCategoriesConnection: (args?: {
    where?: PunbbCategoryWhereInput;
    orderBy?: PunbbCategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PunbbCategoryConnectionPromise;
  punbbForum: (where: PunbbForumWhereUniqueInput) => PunbbForumNullablePromise;
  punbbForums: (args?: {
    where?: PunbbForumWhereInput;
    orderBy?: PunbbForumOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<PunbbForum>;
  punbbForumsConnection: (args?: {
    where?: PunbbForumWhereInput;
    orderBy?: PunbbForumOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PunbbForumConnectionPromise;
  punbbOnline: (
    where: PunbbOnlineWhereUniqueInput
  ) => PunbbOnlineNullablePromise;
  punbbOnlines: (args?: {
    where?: PunbbOnlineWhereInput;
    orderBy?: PunbbOnlineOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<PunbbOnline>;
  punbbOnlinesConnection: (args?: {
    where?: PunbbOnlineWhereInput;
    orderBy?: PunbbOnlineOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PunbbOnlineConnectionPromise;
  punbbPost: (where: PunbbPostWhereUniqueInput) => PunbbPostNullablePromise;
  punbbPosts: (args?: {
    where?: PunbbPostWhereInput;
    orderBy?: PunbbPostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<PunbbPost>;
  punbbPostsConnection: (args?: {
    where?: PunbbPostWhereInput;
    orderBy?: PunbbPostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PunbbPostConnectionPromise;
  punbbTopic: (where: PunbbTopicWhereUniqueInput) => PunbbTopicNullablePromise;
  punbbTopics: (args?: {
    where?: PunbbTopicWhereInput;
    orderBy?: PunbbTopicOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<PunbbTopic>;
  punbbTopicsConnection: (args?: {
    where?: PunbbTopicWhereInput;
    orderBy?: PunbbTopicOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PunbbTopicConnectionPromise;
  punbbUploaded: (
    where: PunbbUploadedWhereUniqueInput
  ) => PunbbUploadedNullablePromise;
  punbbUploadeds: (args?: {
    where?: PunbbUploadedWhereInput;
    orderBy?: PunbbUploadedOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<PunbbUploaded>;
  punbbUploadedsConnection: (args?: {
    where?: PunbbUploadedWhereInput;
    orderBy?: PunbbUploadedOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PunbbUploadedConnectionPromise;
  punbbUser: (where: PunbbUserWhereUniqueInput) => PunbbUserNullablePromise;
  punbbUsers: (args?: {
    where?: PunbbUserWhereInput;
    orderBy?: PunbbUserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<PunbbUser>;
  punbbUsersConnection: (args?: {
    where?: PunbbUserWhereInput;
    orderBy?: PunbbUserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PunbbUserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createPunbbBan: (data: PunbbBanCreateInput) => PunbbBanPromise;
  updatePunbbBan: (args: {
    data: PunbbBanUpdateInput;
    where: PunbbBanWhereUniqueInput;
  }) => PunbbBanPromise;
  updateManyPunbbBans: (args: {
    data: PunbbBanUpdateManyMutationInput;
    where?: PunbbBanWhereInput;
  }) => BatchPayloadPromise;
  upsertPunbbBan: (args: {
    where: PunbbBanWhereUniqueInput;
    create: PunbbBanCreateInput;
    update: PunbbBanUpdateInput;
  }) => PunbbBanPromise;
  deletePunbbBan: (where: PunbbBanWhereUniqueInput) => PunbbBanPromise;
  deleteManyPunbbBans: (where?: PunbbBanWhereInput) => BatchPayloadPromise;
  createPunbbCategory: (data: PunbbCategoryCreateInput) => PunbbCategoryPromise;
  updatePunbbCategory: (args: {
    data: PunbbCategoryUpdateInput;
    where: PunbbCategoryWhereUniqueInput;
  }) => PunbbCategoryPromise;
  updateManyPunbbCategories: (args: {
    data: PunbbCategoryUpdateManyMutationInput;
    where?: PunbbCategoryWhereInput;
  }) => BatchPayloadPromise;
  upsertPunbbCategory: (args: {
    where: PunbbCategoryWhereUniqueInput;
    create: PunbbCategoryCreateInput;
    update: PunbbCategoryUpdateInput;
  }) => PunbbCategoryPromise;
  deletePunbbCategory: (
    where: PunbbCategoryWhereUniqueInput
  ) => PunbbCategoryPromise;
  deleteManyPunbbCategories: (
    where?: PunbbCategoryWhereInput
  ) => BatchPayloadPromise;
  createPunbbForum: (data: PunbbForumCreateInput) => PunbbForumPromise;
  updatePunbbForum: (args: {
    data: PunbbForumUpdateInput;
    where: PunbbForumWhereUniqueInput;
  }) => PunbbForumPromise;
  updateManyPunbbForums: (args: {
    data: PunbbForumUpdateManyMutationInput;
    where?: PunbbForumWhereInput;
  }) => BatchPayloadPromise;
  upsertPunbbForum: (args: {
    where: PunbbForumWhereUniqueInput;
    create: PunbbForumCreateInput;
    update: PunbbForumUpdateInput;
  }) => PunbbForumPromise;
  deletePunbbForum: (where: PunbbForumWhereUniqueInput) => PunbbForumPromise;
  deleteManyPunbbForums: (where?: PunbbForumWhereInput) => BatchPayloadPromise;
  createPunbbOnline: (data: PunbbOnlineCreateInput) => PunbbOnlinePromise;
  updatePunbbOnline: (args: {
    data: PunbbOnlineUpdateInput;
    where: PunbbOnlineWhereUniqueInput;
  }) => PunbbOnlinePromise;
  updateManyPunbbOnlines: (args: {
    data: PunbbOnlineUpdateManyMutationInput;
    where?: PunbbOnlineWhereInput;
  }) => BatchPayloadPromise;
  upsertPunbbOnline: (args: {
    where: PunbbOnlineWhereUniqueInput;
    create: PunbbOnlineCreateInput;
    update: PunbbOnlineUpdateInput;
  }) => PunbbOnlinePromise;
  deletePunbbOnline: (where: PunbbOnlineWhereUniqueInput) => PunbbOnlinePromise;
  deleteManyPunbbOnlines: (
    where?: PunbbOnlineWhereInput
  ) => BatchPayloadPromise;
  createPunbbPost: (data: PunbbPostCreateInput) => PunbbPostPromise;
  updatePunbbPost: (args: {
    data: PunbbPostUpdateInput;
    where: PunbbPostWhereUniqueInput;
  }) => PunbbPostPromise;
  updateManyPunbbPosts: (args: {
    data: PunbbPostUpdateManyMutationInput;
    where?: PunbbPostWhereInput;
  }) => BatchPayloadPromise;
  upsertPunbbPost: (args: {
    where: PunbbPostWhereUniqueInput;
    create: PunbbPostCreateInput;
    update: PunbbPostUpdateInput;
  }) => PunbbPostPromise;
  deletePunbbPost: (where: PunbbPostWhereUniqueInput) => PunbbPostPromise;
  deleteManyPunbbPosts: (where?: PunbbPostWhereInput) => BatchPayloadPromise;
  createPunbbTopic: (data: PunbbTopicCreateInput) => PunbbTopicPromise;
  updatePunbbTopic: (args: {
    data: PunbbTopicUpdateInput;
    where: PunbbTopicWhereUniqueInput;
  }) => PunbbTopicPromise;
  updateManyPunbbTopics: (args: {
    data: PunbbTopicUpdateManyMutationInput;
    where?: PunbbTopicWhereInput;
  }) => BatchPayloadPromise;
  upsertPunbbTopic: (args: {
    where: PunbbTopicWhereUniqueInput;
    create: PunbbTopicCreateInput;
    update: PunbbTopicUpdateInput;
  }) => PunbbTopicPromise;
  deletePunbbTopic: (where: PunbbTopicWhereUniqueInput) => PunbbTopicPromise;
  deleteManyPunbbTopics: (where?: PunbbTopicWhereInput) => BatchPayloadPromise;
  createPunbbUploaded: (data: PunbbUploadedCreateInput) => PunbbUploadedPromise;
  updatePunbbUploaded: (args: {
    data: PunbbUploadedUpdateInput;
    where: PunbbUploadedWhereUniqueInput;
  }) => PunbbUploadedPromise;
  updateManyPunbbUploadeds: (args: {
    data: PunbbUploadedUpdateManyMutationInput;
    where?: PunbbUploadedWhereInput;
  }) => BatchPayloadPromise;
  upsertPunbbUploaded: (args: {
    where: PunbbUploadedWhereUniqueInput;
    create: PunbbUploadedCreateInput;
    update: PunbbUploadedUpdateInput;
  }) => PunbbUploadedPromise;
  deletePunbbUploaded: (
    where: PunbbUploadedWhereUniqueInput
  ) => PunbbUploadedPromise;
  deleteManyPunbbUploadeds: (
    where?: PunbbUploadedWhereInput
  ) => BatchPayloadPromise;
  createPunbbUser: (data: PunbbUserCreateInput) => PunbbUserPromise;
  updatePunbbUser: (args: {
    data: PunbbUserUpdateInput;
    where: PunbbUserWhereUniqueInput;
  }) => PunbbUserPromise;
  updateManyPunbbUsers: (args: {
    data: PunbbUserUpdateManyMutationInput;
    where?: PunbbUserWhereInput;
  }) => BatchPayloadPromise;
  upsertPunbbUser: (args: {
    where: PunbbUserWhereUniqueInput;
    create: PunbbUserCreateInput;
    update: PunbbUserUpdateInput;
  }) => PunbbUserPromise;
  deletePunbbUser: (where: PunbbUserWhereUniqueInput) => PunbbUserPromise;
  deleteManyPunbbUsers: (where?: PunbbUserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  punbbBan: (
    where?: PunbbBanSubscriptionWhereInput
  ) => PunbbBanSubscriptionPayloadSubscription;
  punbbCategory: (
    where?: PunbbCategorySubscriptionWhereInput
  ) => PunbbCategorySubscriptionPayloadSubscription;
  punbbForum: (
    where?: PunbbForumSubscriptionWhereInput
  ) => PunbbForumSubscriptionPayloadSubscription;
  punbbOnline: (
    where?: PunbbOnlineSubscriptionWhereInput
  ) => PunbbOnlineSubscriptionPayloadSubscription;
  punbbPost: (
    where?: PunbbPostSubscriptionWhereInput
  ) => PunbbPostSubscriptionPayloadSubscription;
  punbbTopic: (
    where?: PunbbTopicSubscriptionWhereInput
  ) => PunbbTopicSubscriptionPayloadSubscription;
  punbbUploaded: (
    where?: PunbbUploadedSubscriptionWhereInput
  ) => PunbbUploadedSubscriptionPayloadSubscription;
  punbbUser: (
    where?: PunbbUserSubscriptionWhereInput
  ) => PunbbUserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type PunbbBanOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "expire_ASC"
  | "expire_DESC"
  | "ip_ASC"
  | "ip_DESC"
  | "message_ASC"
  | "message_DESC"
  | "username_ASC"
  | "username_DESC";

export type PunbbCategoryOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "catName_ASC"
  | "catName_DESC"
  | "dispPosition_ASC"
  | "dispPosition_DESC";

export type PunbbForumOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "catId_ASC"
  | "catId_DESC"
  | "dispPosition_ASC"
  | "dispPosition_DESC"
  | "forumDesc_ASC"
  | "forumDesc_DESC"
  | "forumName_ASC"
  | "forumName_DESC"
  | "lastPost_ASC"
  | "lastPost_DESC"
  | "lastPoster_ASC"
  | "lastPoster_DESC"
  | "lastPostId_ASC"
  | "lastPostId_DESC"
  | "moderators_ASC"
  | "moderators_DESC"
  | "redirectUrl_ASC"
  | "redirectUrl_DESC"
  | "sortBy_ASC"
  | "sortBy_DESC";

export type PunbbOnlineOrderByInput =
  | "ident_ASC"
  | "ident_DESC"
  | "idle_ASC"
  | "idle_DESC"
  | "logged_ASC"
  | "logged_DESC"
  | "userId_ASC"
  | "userId_DESC";

export type PunbbPostOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "edited_ASC"
  | "edited_DESC"
  | "editedBy_ASC"
  | "editedBy_DESC"
  | "hideSmilies_ASC"
  | "hideSmilies_DESC"
  | "message_ASC"
  | "message_DESC"
  | "posted_ASC"
  | "posted_DESC"
  | "poster_ASC"
  | "poster_DESC"
  | "posterEmail_ASC"
  | "posterEmail_DESC"
  | "posterId_ASC"
  | "posterId_DESC"
  | "posterIp_ASC"
  | "posterIp_DESC"
  | "topicId_ASC"
  | "topicId_DESC";

export type PunbbTopicOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "closed_ASC"
  | "closed_DESC"
  | "forumId_ASC"
  | "forumId_DESC"
  | "lastPost_ASC"
  | "lastPost_DESC"
  | "lastPoster_ASC"
  | "lastPoster_DESC"
  | "lastPostId_ASC"
  | "lastPostId_DESC"
  | "movedTo_ASC"
  | "movedTo_DESC"
  | "no_ASC"
  | "no_DESC"
  | "posted_ASC"
  | "posted_DESC"
  | "poster_ASC"
  | "poster_DESC"
  | "question_ASC"
  | "question_DESC"
  | "sticky_ASC"
  | "sticky_DESC"
  | "subject_ASC"
  | "subject_DESC"
  | "yes_ASC"
  | "yes_DESC";

export type PunbbUploadedOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "data_ASC"
  | "data_DESC"
  | "descr_ASC"
  | "descr_DESC"
  | "downs_ASC"
  | "downs_DESC"
  | "file_ASC"
  | "file_DESC"
  | "size_ASC"
  | "size_DESC"
  | "uid_ASC"
  | "uid_DESC"
  | "user_ASC"
  | "user_DESC"
  | "userStat_ASC"
  | "userStat_DESC";

export type PunbbUserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "activateKey_ASC"
  | "activateKey_DESC"
  | "activateString_ASC"
  | "activateString_DESC"
  | "adminNote_ASC"
  | "adminNote_DESC"
  | "aim_ASC"
  | "aim_DESC"
  | "dispPosts_ASC"
  | "dispPosts_DESC"
  | "dispTopics_ASC"
  | "dispTopics_DESC"
  | "email_ASC"
  | "email_DESC"
  | "emailSetting_ASC"
  | "emailSetting_DESC"
  | "groupId_ASC"
  | "groupId_DESC"
  | "icq_ASC"
  | "icq_DESC"
  | "jabber_ASC"
  | "jabber_DESC"
  | "language_ASC"
  | "language_DESC"
  | "lastPost_ASC"
  | "lastPost_DESC"
  | "lastVisit_ASC"
  | "lastVisit_DESC"
  | "location_ASC"
  | "location_DESC"
  | "msn_ASC"
  | "msn_DESC"
  | "notifyWithPost_ASC"
  | "notifyWithPost_DESC"
  | "numPosts_ASC"
  | "numPosts_DESC"
  | "password_ASC"
  | "password_DESC"
  | "readTopics_ASC"
  | "readTopics_DESC"
  | "realname_ASC"
  | "realname_DESC"
  | "registered_ASC"
  | "registered_DESC"
  | "registrationIp_ASC"
  | "registrationIp_DESC"
  | "savePass_ASC"
  | "savePass_DESC"
  | "showAvatars_ASC"
  | "showAvatars_DESC"
  | "showImg_ASC"
  | "showImg_DESC"
  | "showImgSig_ASC"
  | "showImgSig_DESC"
  | "showSig_ASC"
  | "showSig_DESC"
  | "showSmilies_ASC"
  | "showSmilies_DESC"
  | "signature_ASC"
  | "signature_DESC"
  | "style_ASC"
  | "style_DESC"
  | "timezone_ASC"
  | "timezone_DESC"
  | "title_ASC"
  | "title_DESC"
  | "url_ASC"
  | "url_DESC"
  | "useAvatar_ASC"
  | "useAvatar_DESC"
  | "username_ASC"
  | "username_DESC"
  | "yahoo_ASC"
  | "yahoo_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type PunbbBanWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface PunbbBanWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  expire?: Maybe<Int>;
  expire_not?: Maybe<Int>;
  expire_in?: Maybe<Int[] | Int>;
  expire_not_in?: Maybe<Int[] | Int>;
  expire_lt?: Maybe<Int>;
  expire_lte?: Maybe<Int>;
  expire_gt?: Maybe<Int>;
  expire_gte?: Maybe<Int>;
  ip?: Maybe<String>;
  ip_not?: Maybe<String>;
  ip_in?: Maybe<String[] | String>;
  ip_not_in?: Maybe<String[] | String>;
  ip_lt?: Maybe<String>;
  ip_lte?: Maybe<String>;
  ip_gt?: Maybe<String>;
  ip_gte?: Maybe<String>;
  ip_contains?: Maybe<String>;
  ip_not_contains?: Maybe<String>;
  ip_starts_with?: Maybe<String>;
  ip_not_starts_with?: Maybe<String>;
  ip_ends_with?: Maybe<String>;
  ip_not_ends_with?: Maybe<String>;
  message?: Maybe<String>;
  message_not?: Maybe<String>;
  message_in?: Maybe<String[] | String>;
  message_not_in?: Maybe<String[] | String>;
  message_lt?: Maybe<String>;
  message_lte?: Maybe<String>;
  message_gt?: Maybe<String>;
  message_gte?: Maybe<String>;
  message_contains?: Maybe<String>;
  message_not_contains?: Maybe<String>;
  message_starts_with?: Maybe<String>;
  message_not_starts_with?: Maybe<String>;
  message_ends_with?: Maybe<String>;
  message_not_ends_with?: Maybe<String>;
  username?: Maybe<String>;
  username_not?: Maybe<String>;
  username_in?: Maybe<String[] | String>;
  username_not_in?: Maybe<String[] | String>;
  username_lt?: Maybe<String>;
  username_lte?: Maybe<String>;
  username_gt?: Maybe<String>;
  username_gte?: Maybe<String>;
  username_contains?: Maybe<String>;
  username_not_contains?: Maybe<String>;
  username_starts_with?: Maybe<String>;
  username_not_starts_with?: Maybe<String>;
  username_ends_with?: Maybe<String>;
  username_not_ends_with?: Maybe<String>;
  AND?: Maybe<PunbbBanWhereInput[] | PunbbBanWhereInput>;
  OR?: Maybe<PunbbBanWhereInput[] | PunbbBanWhereInput>;
  NOT?: Maybe<PunbbBanWhereInput[] | PunbbBanWhereInput>;
}

export type PunbbCategoryWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface PunbbCategoryWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  catName?: Maybe<String>;
  catName_not?: Maybe<String>;
  catName_in?: Maybe<String[] | String>;
  catName_not_in?: Maybe<String[] | String>;
  catName_lt?: Maybe<String>;
  catName_lte?: Maybe<String>;
  catName_gt?: Maybe<String>;
  catName_gte?: Maybe<String>;
  catName_contains?: Maybe<String>;
  catName_not_contains?: Maybe<String>;
  catName_starts_with?: Maybe<String>;
  catName_not_starts_with?: Maybe<String>;
  catName_ends_with?: Maybe<String>;
  catName_not_ends_with?: Maybe<String>;
  dispPosition?: Maybe<Int>;
  dispPosition_not?: Maybe<Int>;
  dispPosition_in?: Maybe<Int[] | Int>;
  dispPosition_not_in?: Maybe<Int[] | Int>;
  dispPosition_lt?: Maybe<Int>;
  dispPosition_lte?: Maybe<Int>;
  dispPosition_gt?: Maybe<Int>;
  dispPosition_gte?: Maybe<Int>;
  AND?: Maybe<PunbbCategoryWhereInput[] | PunbbCategoryWhereInput>;
  OR?: Maybe<PunbbCategoryWhereInput[] | PunbbCategoryWhereInput>;
  NOT?: Maybe<PunbbCategoryWhereInput[] | PunbbCategoryWhereInput>;
}

export type PunbbForumWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface PunbbForumWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  catId?: Maybe<Int>;
  catId_not?: Maybe<Int>;
  catId_in?: Maybe<Int[] | Int>;
  catId_not_in?: Maybe<Int[] | Int>;
  catId_lt?: Maybe<Int>;
  catId_lte?: Maybe<Int>;
  catId_gt?: Maybe<Int>;
  catId_gte?: Maybe<Int>;
  dispPosition?: Maybe<Int>;
  dispPosition_not?: Maybe<Int>;
  dispPosition_in?: Maybe<Int[] | Int>;
  dispPosition_not_in?: Maybe<Int[] | Int>;
  dispPosition_lt?: Maybe<Int>;
  dispPosition_lte?: Maybe<Int>;
  dispPosition_gt?: Maybe<Int>;
  dispPosition_gte?: Maybe<Int>;
  forumDesc?: Maybe<String>;
  forumDesc_not?: Maybe<String>;
  forumDesc_in?: Maybe<String[] | String>;
  forumDesc_not_in?: Maybe<String[] | String>;
  forumDesc_lt?: Maybe<String>;
  forumDesc_lte?: Maybe<String>;
  forumDesc_gt?: Maybe<String>;
  forumDesc_gte?: Maybe<String>;
  forumDesc_contains?: Maybe<String>;
  forumDesc_not_contains?: Maybe<String>;
  forumDesc_starts_with?: Maybe<String>;
  forumDesc_not_starts_with?: Maybe<String>;
  forumDesc_ends_with?: Maybe<String>;
  forumDesc_not_ends_with?: Maybe<String>;
  forumName?: Maybe<String>;
  forumName_not?: Maybe<String>;
  forumName_in?: Maybe<String[] | String>;
  forumName_not_in?: Maybe<String[] | String>;
  forumName_lt?: Maybe<String>;
  forumName_lte?: Maybe<String>;
  forumName_gt?: Maybe<String>;
  forumName_gte?: Maybe<String>;
  forumName_contains?: Maybe<String>;
  forumName_not_contains?: Maybe<String>;
  forumName_starts_with?: Maybe<String>;
  forumName_not_starts_with?: Maybe<String>;
  forumName_ends_with?: Maybe<String>;
  forumName_not_ends_with?: Maybe<String>;
  lastPost?: Maybe<Int>;
  lastPost_not?: Maybe<Int>;
  lastPost_in?: Maybe<Int[] | Int>;
  lastPost_not_in?: Maybe<Int[] | Int>;
  lastPost_lt?: Maybe<Int>;
  lastPost_lte?: Maybe<Int>;
  lastPost_gt?: Maybe<Int>;
  lastPost_gte?: Maybe<Int>;
  lastPoster?: Maybe<String>;
  lastPoster_not?: Maybe<String>;
  lastPoster_in?: Maybe<String[] | String>;
  lastPoster_not_in?: Maybe<String[] | String>;
  lastPoster_lt?: Maybe<String>;
  lastPoster_lte?: Maybe<String>;
  lastPoster_gt?: Maybe<String>;
  lastPoster_gte?: Maybe<String>;
  lastPoster_contains?: Maybe<String>;
  lastPoster_not_contains?: Maybe<String>;
  lastPoster_starts_with?: Maybe<String>;
  lastPoster_not_starts_with?: Maybe<String>;
  lastPoster_ends_with?: Maybe<String>;
  lastPoster_not_ends_with?: Maybe<String>;
  lastPostId?: Maybe<Int>;
  lastPostId_not?: Maybe<Int>;
  lastPostId_in?: Maybe<Int[] | Int>;
  lastPostId_not_in?: Maybe<Int[] | Int>;
  lastPostId_lt?: Maybe<Int>;
  lastPostId_lte?: Maybe<Int>;
  lastPostId_gt?: Maybe<Int>;
  lastPostId_gte?: Maybe<Int>;
  moderators?: Maybe<String>;
  moderators_not?: Maybe<String>;
  moderators_in?: Maybe<String[] | String>;
  moderators_not_in?: Maybe<String[] | String>;
  moderators_lt?: Maybe<String>;
  moderators_lte?: Maybe<String>;
  moderators_gt?: Maybe<String>;
  moderators_gte?: Maybe<String>;
  moderators_contains?: Maybe<String>;
  moderators_not_contains?: Maybe<String>;
  moderators_starts_with?: Maybe<String>;
  moderators_not_starts_with?: Maybe<String>;
  moderators_ends_with?: Maybe<String>;
  moderators_not_ends_with?: Maybe<String>;
  redirectUrl?: Maybe<String>;
  redirectUrl_not?: Maybe<String>;
  redirectUrl_in?: Maybe<String[] | String>;
  redirectUrl_not_in?: Maybe<String[] | String>;
  redirectUrl_lt?: Maybe<String>;
  redirectUrl_lte?: Maybe<String>;
  redirectUrl_gt?: Maybe<String>;
  redirectUrl_gte?: Maybe<String>;
  redirectUrl_contains?: Maybe<String>;
  redirectUrl_not_contains?: Maybe<String>;
  redirectUrl_starts_with?: Maybe<String>;
  redirectUrl_not_starts_with?: Maybe<String>;
  redirectUrl_ends_with?: Maybe<String>;
  redirectUrl_not_ends_with?: Maybe<String>;
  sortBy?: Maybe<Boolean>;
  sortBy_not?: Maybe<Boolean>;
  AND?: Maybe<PunbbForumWhereInput[] | PunbbForumWhereInput>;
  OR?: Maybe<PunbbForumWhereInput[] | PunbbForumWhereInput>;
  NOT?: Maybe<PunbbForumWhereInput[] | PunbbForumWhereInput>;
}

export type PunbbOnlineWhereUniqueInput = AtLeastOne<{
  userId: Maybe<Int>;
}>;

export interface PunbbOnlineWhereInput {
  ident?: Maybe<String>;
  ident_not?: Maybe<String>;
  ident_in?: Maybe<String[] | String>;
  ident_not_in?: Maybe<String[] | String>;
  ident_lt?: Maybe<String>;
  ident_lte?: Maybe<String>;
  ident_gt?: Maybe<String>;
  ident_gte?: Maybe<String>;
  ident_contains?: Maybe<String>;
  ident_not_contains?: Maybe<String>;
  ident_starts_with?: Maybe<String>;
  ident_not_starts_with?: Maybe<String>;
  ident_ends_with?: Maybe<String>;
  ident_not_ends_with?: Maybe<String>;
  idle?: Maybe<Boolean>;
  idle_not?: Maybe<Boolean>;
  logged?: Maybe<Int>;
  logged_not?: Maybe<Int>;
  logged_in?: Maybe<Int[] | Int>;
  logged_not_in?: Maybe<Int[] | Int>;
  logged_lt?: Maybe<Int>;
  logged_lte?: Maybe<Int>;
  logged_gt?: Maybe<Int>;
  logged_gte?: Maybe<Int>;
  userId?: Maybe<Int>;
  userId_not?: Maybe<Int>;
  userId_in?: Maybe<Int[] | Int>;
  userId_not_in?: Maybe<Int[] | Int>;
  userId_lt?: Maybe<Int>;
  userId_lte?: Maybe<Int>;
  userId_gt?: Maybe<Int>;
  userId_gte?: Maybe<Int>;
  AND?: Maybe<PunbbOnlineWhereInput[] | PunbbOnlineWhereInput>;
  OR?: Maybe<PunbbOnlineWhereInput[] | PunbbOnlineWhereInput>;
  NOT?: Maybe<PunbbOnlineWhereInput[] | PunbbOnlineWhereInput>;
}

export type PunbbPostWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface PunbbPostWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  edited?: Maybe<Int>;
  edited_not?: Maybe<Int>;
  edited_in?: Maybe<Int[] | Int>;
  edited_not_in?: Maybe<Int[] | Int>;
  edited_lt?: Maybe<Int>;
  edited_lte?: Maybe<Int>;
  edited_gt?: Maybe<Int>;
  edited_gte?: Maybe<Int>;
  editedBy?: Maybe<String>;
  editedBy_not?: Maybe<String>;
  editedBy_in?: Maybe<String[] | String>;
  editedBy_not_in?: Maybe<String[] | String>;
  editedBy_lt?: Maybe<String>;
  editedBy_lte?: Maybe<String>;
  editedBy_gt?: Maybe<String>;
  editedBy_gte?: Maybe<String>;
  editedBy_contains?: Maybe<String>;
  editedBy_not_contains?: Maybe<String>;
  editedBy_starts_with?: Maybe<String>;
  editedBy_not_starts_with?: Maybe<String>;
  editedBy_ends_with?: Maybe<String>;
  editedBy_not_ends_with?: Maybe<String>;
  hideSmilies?: Maybe<Boolean>;
  hideSmilies_not?: Maybe<Boolean>;
  message?: Maybe<String>;
  message_not?: Maybe<String>;
  message_in?: Maybe<String[] | String>;
  message_not_in?: Maybe<String[] | String>;
  message_lt?: Maybe<String>;
  message_lte?: Maybe<String>;
  message_gt?: Maybe<String>;
  message_gte?: Maybe<String>;
  message_contains?: Maybe<String>;
  message_not_contains?: Maybe<String>;
  message_starts_with?: Maybe<String>;
  message_not_starts_with?: Maybe<String>;
  message_ends_with?: Maybe<String>;
  message_not_ends_with?: Maybe<String>;
  posted?: Maybe<Int>;
  posted_not?: Maybe<Int>;
  posted_in?: Maybe<Int[] | Int>;
  posted_not_in?: Maybe<Int[] | Int>;
  posted_lt?: Maybe<Int>;
  posted_lte?: Maybe<Int>;
  posted_gt?: Maybe<Int>;
  posted_gte?: Maybe<Int>;
  poster?: Maybe<String>;
  poster_not?: Maybe<String>;
  poster_in?: Maybe<String[] | String>;
  poster_not_in?: Maybe<String[] | String>;
  poster_lt?: Maybe<String>;
  poster_lte?: Maybe<String>;
  poster_gt?: Maybe<String>;
  poster_gte?: Maybe<String>;
  poster_contains?: Maybe<String>;
  poster_not_contains?: Maybe<String>;
  poster_starts_with?: Maybe<String>;
  poster_not_starts_with?: Maybe<String>;
  poster_ends_with?: Maybe<String>;
  poster_not_ends_with?: Maybe<String>;
  posterEmail?: Maybe<String>;
  posterEmail_not?: Maybe<String>;
  posterEmail_in?: Maybe<String[] | String>;
  posterEmail_not_in?: Maybe<String[] | String>;
  posterEmail_lt?: Maybe<String>;
  posterEmail_lte?: Maybe<String>;
  posterEmail_gt?: Maybe<String>;
  posterEmail_gte?: Maybe<String>;
  posterEmail_contains?: Maybe<String>;
  posterEmail_not_contains?: Maybe<String>;
  posterEmail_starts_with?: Maybe<String>;
  posterEmail_not_starts_with?: Maybe<String>;
  posterEmail_ends_with?: Maybe<String>;
  posterEmail_not_ends_with?: Maybe<String>;
  posterId?: Maybe<Int>;
  posterId_not?: Maybe<Int>;
  posterId_in?: Maybe<Int[] | Int>;
  posterId_not_in?: Maybe<Int[] | Int>;
  posterId_lt?: Maybe<Int>;
  posterId_lte?: Maybe<Int>;
  posterId_gt?: Maybe<Int>;
  posterId_gte?: Maybe<Int>;
  posterIp?: Maybe<String>;
  posterIp_not?: Maybe<String>;
  posterIp_in?: Maybe<String[] | String>;
  posterIp_not_in?: Maybe<String[] | String>;
  posterIp_lt?: Maybe<String>;
  posterIp_lte?: Maybe<String>;
  posterIp_gt?: Maybe<String>;
  posterIp_gte?: Maybe<String>;
  posterIp_contains?: Maybe<String>;
  posterIp_not_contains?: Maybe<String>;
  posterIp_starts_with?: Maybe<String>;
  posterIp_not_starts_with?: Maybe<String>;
  posterIp_ends_with?: Maybe<String>;
  posterIp_not_ends_with?: Maybe<String>;
  topicId?: Maybe<Int>;
  topicId_not?: Maybe<Int>;
  topicId_in?: Maybe<Int[] | Int>;
  topicId_not_in?: Maybe<Int[] | Int>;
  topicId_lt?: Maybe<Int>;
  topicId_lte?: Maybe<Int>;
  topicId_gt?: Maybe<Int>;
  topicId_gte?: Maybe<Int>;
  AND?: Maybe<PunbbPostWhereInput[] | PunbbPostWhereInput>;
  OR?: Maybe<PunbbPostWhereInput[] | PunbbPostWhereInput>;
  NOT?: Maybe<PunbbPostWhereInput[] | PunbbPostWhereInput>;
}

export type PunbbTopicWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface PunbbTopicWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  closed?: Maybe<Boolean>;
  closed_not?: Maybe<Boolean>;
  forumId?: Maybe<Int>;
  forumId_not?: Maybe<Int>;
  forumId_in?: Maybe<Int[] | Int>;
  forumId_not_in?: Maybe<Int[] | Int>;
  forumId_lt?: Maybe<Int>;
  forumId_lte?: Maybe<Int>;
  forumId_gt?: Maybe<Int>;
  forumId_gte?: Maybe<Int>;
  lastPost?: Maybe<Int>;
  lastPost_not?: Maybe<Int>;
  lastPost_in?: Maybe<Int[] | Int>;
  lastPost_not_in?: Maybe<Int[] | Int>;
  lastPost_lt?: Maybe<Int>;
  lastPost_lte?: Maybe<Int>;
  lastPost_gt?: Maybe<Int>;
  lastPost_gte?: Maybe<Int>;
  lastPoster?: Maybe<String>;
  lastPoster_not?: Maybe<String>;
  lastPoster_in?: Maybe<String[] | String>;
  lastPoster_not_in?: Maybe<String[] | String>;
  lastPoster_lt?: Maybe<String>;
  lastPoster_lte?: Maybe<String>;
  lastPoster_gt?: Maybe<String>;
  lastPoster_gte?: Maybe<String>;
  lastPoster_contains?: Maybe<String>;
  lastPoster_not_contains?: Maybe<String>;
  lastPoster_starts_with?: Maybe<String>;
  lastPoster_not_starts_with?: Maybe<String>;
  lastPoster_ends_with?: Maybe<String>;
  lastPoster_not_ends_with?: Maybe<String>;
  lastPostId?: Maybe<Int>;
  lastPostId_not?: Maybe<Int>;
  lastPostId_in?: Maybe<Int[] | Int>;
  lastPostId_not_in?: Maybe<Int[] | Int>;
  lastPostId_lt?: Maybe<Int>;
  lastPostId_lte?: Maybe<Int>;
  lastPostId_gt?: Maybe<Int>;
  lastPostId_gte?: Maybe<Int>;
  movedTo?: Maybe<Int>;
  movedTo_not?: Maybe<Int>;
  movedTo_in?: Maybe<Int[] | Int>;
  movedTo_not_in?: Maybe<Int[] | Int>;
  movedTo_lt?: Maybe<Int>;
  movedTo_lte?: Maybe<Int>;
  movedTo_gt?: Maybe<Int>;
  movedTo_gte?: Maybe<Int>;
  no?: Maybe<String>;
  no_not?: Maybe<String>;
  no_in?: Maybe<String[] | String>;
  no_not_in?: Maybe<String[] | String>;
  no_lt?: Maybe<String>;
  no_lte?: Maybe<String>;
  no_gt?: Maybe<String>;
  no_gte?: Maybe<String>;
  no_contains?: Maybe<String>;
  no_not_contains?: Maybe<String>;
  no_starts_with?: Maybe<String>;
  no_not_starts_with?: Maybe<String>;
  no_ends_with?: Maybe<String>;
  no_not_ends_with?: Maybe<String>;
  posted?: Maybe<Int>;
  posted_not?: Maybe<Int>;
  posted_in?: Maybe<Int[] | Int>;
  posted_not_in?: Maybe<Int[] | Int>;
  posted_lt?: Maybe<Int>;
  posted_lte?: Maybe<Int>;
  posted_gt?: Maybe<Int>;
  posted_gte?: Maybe<Int>;
  poster?: Maybe<String>;
  poster_not?: Maybe<String>;
  poster_in?: Maybe<String[] | String>;
  poster_not_in?: Maybe<String[] | String>;
  poster_lt?: Maybe<String>;
  poster_lte?: Maybe<String>;
  poster_gt?: Maybe<String>;
  poster_gte?: Maybe<String>;
  poster_contains?: Maybe<String>;
  poster_not_contains?: Maybe<String>;
  poster_starts_with?: Maybe<String>;
  poster_not_starts_with?: Maybe<String>;
  poster_ends_with?: Maybe<String>;
  poster_not_ends_with?: Maybe<String>;
  question?: Maybe<String>;
  question_not?: Maybe<String>;
  question_in?: Maybe<String[] | String>;
  question_not_in?: Maybe<String[] | String>;
  question_lt?: Maybe<String>;
  question_lte?: Maybe<String>;
  question_gt?: Maybe<String>;
  question_gte?: Maybe<String>;
  question_contains?: Maybe<String>;
  question_not_contains?: Maybe<String>;
  question_starts_with?: Maybe<String>;
  question_not_starts_with?: Maybe<String>;
  question_ends_with?: Maybe<String>;
  question_not_ends_with?: Maybe<String>;
  sticky?: Maybe<Boolean>;
  sticky_not?: Maybe<Boolean>;
  subject?: Maybe<String>;
  subject_not?: Maybe<String>;
  subject_in?: Maybe<String[] | String>;
  subject_not_in?: Maybe<String[] | String>;
  subject_lt?: Maybe<String>;
  subject_lte?: Maybe<String>;
  subject_gt?: Maybe<String>;
  subject_gte?: Maybe<String>;
  subject_contains?: Maybe<String>;
  subject_not_contains?: Maybe<String>;
  subject_starts_with?: Maybe<String>;
  subject_not_starts_with?: Maybe<String>;
  subject_ends_with?: Maybe<String>;
  subject_not_ends_with?: Maybe<String>;
  yes?: Maybe<String>;
  yes_not?: Maybe<String>;
  yes_in?: Maybe<String[] | String>;
  yes_not_in?: Maybe<String[] | String>;
  yes_lt?: Maybe<String>;
  yes_lte?: Maybe<String>;
  yes_gt?: Maybe<String>;
  yes_gte?: Maybe<String>;
  yes_contains?: Maybe<String>;
  yes_not_contains?: Maybe<String>;
  yes_starts_with?: Maybe<String>;
  yes_not_starts_with?: Maybe<String>;
  yes_ends_with?: Maybe<String>;
  yes_not_ends_with?: Maybe<String>;
  AND?: Maybe<PunbbTopicWhereInput[] | PunbbTopicWhereInput>;
  OR?: Maybe<PunbbTopicWhereInput[] | PunbbTopicWhereInput>;
  NOT?: Maybe<PunbbTopicWhereInput[] | PunbbTopicWhereInput>;
}

export type PunbbUploadedWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface PunbbUploadedWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  data?: Maybe<Int>;
  data_not?: Maybe<Int>;
  data_in?: Maybe<Int[] | Int>;
  data_not_in?: Maybe<Int[] | Int>;
  data_lt?: Maybe<Int>;
  data_lte?: Maybe<Int>;
  data_gt?: Maybe<Int>;
  data_gte?: Maybe<Int>;
  descr?: Maybe<String>;
  descr_not?: Maybe<String>;
  descr_in?: Maybe<String[] | String>;
  descr_not_in?: Maybe<String[] | String>;
  descr_lt?: Maybe<String>;
  descr_lte?: Maybe<String>;
  descr_gt?: Maybe<String>;
  descr_gte?: Maybe<String>;
  descr_contains?: Maybe<String>;
  descr_not_contains?: Maybe<String>;
  descr_starts_with?: Maybe<String>;
  descr_not_starts_with?: Maybe<String>;
  descr_ends_with?: Maybe<String>;
  descr_not_ends_with?: Maybe<String>;
  downs?: Maybe<Int>;
  downs_not?: Maybe<Int>;
  downs_in?: Maybe<Int[] | Int>;
  downs_not_in?: Maybe<Int[] | Int>;
  downs_lt?: Maybe<Int>;
  downs_lte?: Maybe<Int>;
  downs_gt?: Maybe<Int>;
  downs_gte?: Maybe<Int>;
  file?: Maybe<String>;
  file_not?: Maybe<String>;
  file_in?: Maybe<String[] | String>;
  file_not_in?: Maybe<String[] | String>;
  file_lt?: Maybe<String>;
  file_lte?: Maybe<String>;
  file_gt?: Maybe<String>;
  file_gte?: Maybe<String>;
  file_contains?: Maybe<String>;
  file_not_contains?: Maybe<String>;
  file_starts_with?: Maybe<String>;
  file_not_starts_with?: Maybe<String>;
  file_ends_with?: Maybe<String>;
  file_not_ends_with?: Maybe<String>;
  size?: Maybe<Int>;
  size_not?: Maybe<Int>;
  size_in?: Maybe<Int[] | Int>;
  size_not_in?: Maybe<Int[] | Int>;
  size_lt?: Maybe<Int>;
  size_lte?: Maybe<Int>;
  size_gt?: Maybe<Int>;
  size_gte?: Maybe<Int>;
  uid?: Maybe<Int>;
  uid_not?: Maybe<Int>;
  uid_in?: Maybe<Int[] | Int>;
  uid_not_in?: Maybe<Int[] | Int>;
  uid_lt?: Maybe<Int>;
  uid_lte?: Maybe<Int>;
  uid_gt?: Maybe<Int>;
  uid_gte?: Maybe<Int>;
  user?: Maybe<String>;
  user_not?: Maybe<String>;
  user_in?: Maybe<String[] | String>;
  user_not_in?: Maybe<String[] | String>;
  user_lt?: Maybe<String>;
  user_lte?: Maybe<String>;
  user_gt?: Maybe<String>;
  user_gte?: Maybe<String>;
  user_contains?: Maybe<String>;
  user_not_contains?: Maybe<String>;
  user_starts_with?: Maybe<String>;
  user_not_starts_with?: Maybe<String>;
  user_ends_with?: Maybe<String>;
  user_not_ends_with?: Maybe<String>;
  userStat?: Maybe<String>;
  userStat_not?: Maybe<String>;
  userStat_in?: Maybe<String[] | String>;
  userStat_not_in?: Maybe<String[] | String>;
  userStat_lt?: Maybe<String>;
  userStat_lte?: Maybe<String>;
  userStat_gt?: Maybe<String>;
  userStat_gte?: Maybe<String>;
  userStat_contains?: Maybe<String>;
  userStat_not_contains?: Maybe<String>;
  userStat_starts_with?: Maybe<String>;
  userStat_not_starts_with?: Maybe<String>;
  userStat_ends_with?: Maybe<String>;
  userStat_not_ends_with?: Maybe<String>;
  AND?: Maybe<PunbbUploadedWhereInput[] | PunbbUploadedWhereInput>;
  OR?: Maybe<PunbbUploadedWhereInput[] | PunbbUploadedWhereInput>;
  NOT?: Maybe<PunbbUploadedWhereInput[] | PunbbUploadedWhereInput>;
}

export type PunbbUserWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface PunbbUserWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  activateKey?: Maybe<String>;
  activateKey_not?: Maybe<String>;
  activateKey_in?: Maybe<String[] | String>;
  activateKey_not_in?: Maybe<String[] | String>;
  activateKey_lt?: Maybe<String>;
  activateKey_lte?: Maybe<String>;
  activateKey_gt?: Maybe<String>;
  activateKey_gte?: Maybe<String>;
  activateKey_contains?: Maybe<String>;
  activateKey_not_contains?: Maybe<String>;
  activateKey_starts_with?: Maybe<String>;
  activateKey_not_starts_with?: Maybe<String>;
  activateKey_ends_with?: Maybe<String>;
  activateKey_not_ends_with?: Maybe<String>;
  activateString?: Maybe<String>;
  activateString_not?: Maybe<String>;
  activateString_in?: Maybe<String[] | String>;
  activateString_not_in?: Maybe<String[] | String>;
  activateString_lt?: Maybe<String>;
  activateString_lte?: Maybe<String>;
  activateString_gt?: Maybe<String>;
  activateString_gte?: Maybe<String>;
  activateString_contains?: Maybe<String>;
  activateString_not_contains?: Maybe<String>;
  activateString_starts_with?: Maybe<String>;
  activateString_not_starts_with?: Maybe<String>;
  activateString_ends_with?: Maybe<String>;
  activateString_not_ends_with?: Maybe<String>;
  adminNote?: Maybe<String>;
  adminNote_not?: Maybe<String>;
  adminNote_in?: Maybe<String[] | String>;
  adminNote_not_in?: Maybe<String[] | String>;
  adminNote_lt?: Maybe<String>;
  adminNote_lte?: Maybe<String>;
  adminNote_gt?: Maybe<String>;
  adminNote_gte?: Maybe<String>;
  adminNote_contains?: Maybe<String>;
  adminNote_not_contains?: Maybe<String>;
  adminNote_starts_with?: Maybe<String>;
  adminNote_not_starts_with?: Maybe<String>;
  adminNote_ends_with?: Maybe<String>;
  adminNote_not_ends_with?: Maybe<String>;
  aim?: Maybe<String>;
  aim_not?: Maybe<String>;
  aim_in?: Maybe<String[] | String>;
  aim_not_in?: Maybe<String[] | String>;
  aim_lt?: Maybe<String>;
  aim_lte?: Maybe<String>;
  aim_gt?: Maybe<String>;
  aim_gte?: Maybe<String>;
  aim_contains?: Maybe<String>;
  aim_not_contains?: Maybe<String>;
  aim_starts_with?: Maybe<String>;
  aim_not_starts_with?: Maybe<String>;
  aim_ends_with?: Maybe<String>;
  aim_not_ends_with?: Maybe<String>;
  dispPosts?: Maybe<Boolean>;
  dispPosts_not?: Maybe<Boolean>;
  dispTopics?: Maybe<Boolean>;
  dispTopics_not?: Maybe<Boolean>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  emailSetting?: Maybe<Boolean>;
  emailSetting_not?: Maybe<Boolean>;
  groupId?: Maybe<Int>;
  groupId_not?: Maybe<Int>;
  groupId_in?: Maybe<Int[] | Int>;
  groupId_not_in?: Maybe<Int[] | Int>;
  groupId_lt?: Maybe<Int>;
  groupId_lte?: Maybe<Int>;
  groupId_gt?: Maybe<Int>;
  groupId_gte?: Maybe<Int>;
  icq?: Maybe<String>;
  icq_not?: Maybe<String>;
  icq_in?: Maybe<String[] | String>;
  icq_not_in?: Maybe<String[] | String>;
  icq_lt?: Maybe<String>;
  icq_lte?: Maybe<String>;
  icq_gt?: Maybe<String>;
  icq_gte?: Maybe<String>;
  icq_contains?: Maybe<String>;
  icq_not_contains?: Maybe<String>;
  icq_starts_with?: Maybe<String>;
  icq_not_starts_with?: Maybe<String>;
  icq_ends_with?: Maybe<String>;
  icq_not_ends_with?: Maybe<String>;
  jabber?: Maybe<String>;
  jabber_not?: Maybe<String>;
  jabber_in?: Maybe<String[] | String>;
  jabber_not_in?: Maybe<String[] | String>;
  jabber_lt?: Maybe<String>;
  jabber_lte?: Maybe<String>;
  jabber_gt?: Maybe<String>;
  jabber_gte?: Maybe<String>;
  jabber_contains?: Maybe<String>;
  jabber_not_contains?: Maybe<String>;
  jabber_starts_with?: Maybe<String>;
  jabber_not_starts_with?: Maybe<String>;
  jabber_ends_with?: Maybe<String>;
  jabber_not_ends_with?: Maybe<String>;
  language?: Maybe<String>;
  language_not?: Maybe<String>;
  language_in?: Maybe<String[] | String>;
  language_not_in?: Maybe<String[] | String>;
  language_lt?: Maybe<String>;
  language_lte?: Maybe<String>;
  language_gt?: Maybe<String>;
  language_gte?: Maybe<String>;
  language_contains?: Maybe<String>;
  language_not_contains?: Maybe<String>;
  language_starts_with?: Maybe<String>;
  language_not_starts_with?: Maybe<String>;
  language_ends_with?: Maybe<String>;
  language_not_ends_with?: Maybe<String>;
  lastPost?: Maybe<Int>;
  lastPost_not?: Maybe<Int>;
  lastPost_in?: Maybe<Int[] | Int>;
  lastPost_not_in?: Maybe<Int[] | Int>;
  lastPost_lt?: Maybe<Int>;
  lastPost_lte?: Maybe<Int>;
  lastPost_gt?: Maybe<Int>;
  lastPost_gte?: Maybe<Int>;
  lastVisit?: Maybe<Int>;
  lastVisit_not?: Maybe<Int>;
  lastVisit_in?: Maybe<Int[] | Int>;
  lastVisit_not_in?: Maybe<Int[] | Int>;
  lastVisit_lt?: Maybe<Int>;
  lastVisit_lte?: Maybe<Int>;
  lastVisit_gt?: Maybe<Int>;
  lastVisit_gte?: Maybe<Int>;
  location?: Maybe<String>;
  location_not?: Maybe<String>;
  location_in?: Maybe<String[] | String>;
  location_not_in?: Maybe<String[] | String>;
  location_lt?: Maybe<String>;
  location_lte?: Maybe<String>;
  location_gt?: Maybe<String>;
  location_gte?: Maybe<String>;
  location_contains?: Maybe<String>;
  location_not_contains?: Maybe<String>;
  location_starts_with?: Maybe<String>;
  location_not_starts_with?: Maybe<String>;
  location_ends_with?: Maybe<String>;
  location_not_ends_with?: Maybe<String>;
  msn?: Maybe<String>;
  msn_not?: Maybe<String>;
  msn_in?: Maybe<String[] | String>;
  msn_not_in?: Maybe<String[] | String>;
  msn_lt?: Maybe<String>;
  msn_lte?: Maybe<String>;
  msn_gt?: Maybe<String>;
  msn_gte?: Maybe<String>;
  msn_contains?: Maybe<String>;
  msn_not_contains?: Maybe<String>;
  msn_starts_with?: Maybe<String>;
  msn_not_starts_with?: Maybe<String>;
  msn_ends_with?: Maybe<String>;
  msn_not_ends_with?: Maybe<String>;
  notifyWithPost?: Maybe<Boolean>;
  notifyWithPost_not?: Maybe<Boolean>;
  numPosts?: Maybe<Int>;
  numPosts_not?: Maybe<Int>;
  numPosts_in?: Maybe<Int[] | Int>;
  numPosts_not_in?: Maybe<Int[] | Int>;
  numPosts_lt?: Maybe<Int>;
  numPosts_lte?: Maybe<Int>;
  numPosts_gt?: Maybe<Int>;
  numPosts_gte?: Maybe<Int>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  readTopics?: Maybe<String>;
  readTopics_not?: Maybe<String>;
  readTopics_in?: Maybe<String[] | String>;
  readTopics_not_in?: Maybe<String[] | String>;
  readTopics_lt?: Maybe<String>;
  readTopics_lte?: Maybe<String>;
  readTopics_gt?: Maybe<String>;
  readTopics_gte?: Maybe<String>;
  readTopics_contains?: Maybe<String>;
  readTopics_not_contains?: Maybe<String>;
  readTopics_starts_with?: Maybe<String>;
  readTopics_not_starts_with?: Maybe<String>;
  readTopics_ends_with?: Maybe<String>;
  readTopics_not_ends_with?: Maybe<String>;
  realname?: Maybe<String>;
  realname_not?: Maybe<String>;
  realname_in?: Maybe<String[] | String>;
  realname_not_in?: Maybe<String[] | String>;
  realname_lt?: Maybe<String>;
  realname_lte?: Maybe<String>;
  realname_gt?: Maybe<String>;
  realname_gte?: Maybe<String>;
  realname_contains?: Maybe<String>;
  realname_not_contains?: Maybe<String>;
  realname_starts_with?: Maybe<String>;
  realname_not_starts_with?: Maybe<String>;
  realname_ends_with?: Maybe<String>;
  realname_not_ends_with?: Maybe<String>;
  registered?: Maybe<Int>;
  registered_not?: Maybe<Int>;
  registered_in?: Maybe<Int[] | Int>;
  registered_not_in?: Maybe<Int[] | Int>;
  registered_lt?: Maybe<Int>;
  registered_lte?: Maybe<Int>;
  registered_gt?: Maybe<Int>;
  registered_gte?: Maybe<Int>;
  registrationIp?: Maybe<String>;
  registrationIp_not?: Maybe<String>;
  registrationIp_in?: Maybe<String[] | String>;
  registrationIp_not_in?: Maybe<String[] | String>;
  registrationIp_lt?: Maybe<String>;
  registrationIp_lte?: Maybe<String>;
  registrationIp_gt?: Maybe<String>;
  registrationIp_gte?: Maybe<String>;
  registrationIp_contains?: Maybe<String>;
  registrationIp_not_contains?: Maybe<String>;
  registrationIp_starts_with?: Maybe<String>;
  registrationIp_not_starts_with?: Maybe<String>;
  registrationIp_ends_with?: Maybe<String>;
  registrationIp_not_ends_with?: Maybe<String>;
  savePass?: Maybe<Boolean>;
  savePass_not?: Maybe<Boolean>;
  showAvatars?: Maybe<Boolean>;
  showAvatars_not?: Maybe<Boolean>;
  showImg?: Maybe<Boolean>;
  showImg_not?: Maybe<Boolean>;
  showImgSig?: Maybe<Boolean>;
  showImgSig_not?: Maybe<Boolean>;
  showSig?: Maybe<Boolean>;
  showSig_not?: Maybe<Boolean>;
  showSmilies?: Maybe<Boolean>;
  showSmilies_not?: Maybe<Boolean>;
  signature?: Maybe<String>;
  signature_not?: Maybe<String>;
  signature_in?: Maybe<String[] | String>;
  signature_not_in?: Maybe<String[] | String>;
  signature_lt?: Maybe<String>;
  signature_lte?: Maybe<String>;
  signature_gt?: Maybe<String>;
  signature_gte?: Maybe<String>;
  signature_contains?: Maybe<String>;
  signature_not_contains?: Maybe<String>;
  signature_starts_with?: Maybe<String>;
  signature_not_starts_with?: Maybe<String>;
  signature_ends_with?: Maybe<String>;
  signature_not_ends_with?: Maybe<String>;
  style?: Maybe<String>;
  style_not?: Maybe<String>;
  style_in?: Maybe<String[] | String>;
  style_not_in?: Maybe<String[] | String>;
  style_lt?: Maybe<String>;
  style_lte?: Maybe<String>;
  style_gt?: Maybe<String>;
  style_gte?: Maybe<String>;
  style_contains?: Maybe<String>;
  style_not_contains?: Maybe<String>;
  style_starts_with?: Maybe<String>;
  style_not_starts_with?: Maybe<String>;
  style_ends_with?: Maybe<String>;
  style_not_ends_with?: Maybe<String>;
  timezone?: Maybe<Float>;
  timezone_not?: Maybe<Float>;
  timezone_in?: Maybe<Float[] | Float>;
  timezone_not_in?: Maybe<Float[] | Float>;
  timezone_lt?: Maybe<Float>;
  timezone_lte?: Maybe<Float>;
  timezone_gt?: Maybe<Float>;
  timezone_gte?: Maybe<Float>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  useAvatar?: Maybe<Boolean>;
  useAvatar_not?: Maybe<Boolean>;
  username?: Maybe<String>;
  username_not?: Maybe<String>;
  username_in?: Maybe<String[] | String>;
  username_not_in?: Maybe<String[] | String>;
  username_lt?: Maybe<String>;
  username_lte?: Maybe<String>;
  username_gt?: Maybe<String>;
  username_gte?: Maybe<String>;
  username_contains?: Maybe<String>;
  username_not_contains?: Maybe<String>;
  username_starts_with?: Maybe<String>;
  username_not_starts_with?: Maybe<String>;
  username_ends_with?: Maybe<String>;
  username_not_ends_with?: Maybe<String>;
  yahoo?: Maybe<String>;
  yahoo_not?: Maybe<String>;
  yahoo_in?: Maybe<String[] | String>;
  yahoo_not_in?: Maybe<String[] | String>;
  yahoo_lt?: Maybe<String>;
  yahoo_lte?: Maybe<String>;
  yahoo_gt?: Maybe<String>;
  yahoo_gte?: Maybe<String>;
  yahoo_contains?: Maybe<String>;
  yahoo_not_contains?: Maybe<String>;
  yahoo_starts_with?: Maybe<String>;
  yahoo_not_starts_with?: Maybe<String>;
  yahoo_ends_with?: Maybe<String>;
  yahoo_not_ends_with?: Maybe<String>;
  AND?: Maybe<PunbbUserWhereInput[] | PunbbUserWhereInput>;
  OR?: Maybe<PunbbUserWhereInput[] | PunbbUserWhereInput>;
  NOT?: Maybe<PunbbUserWhereInput[] | PunbbUserWhereInput>;
}

export interface PunbbBanCreateInput {
  id?: Maybe<Int>;
  email?: Maybe<String>;
  expire?: Maybe<Int>;
  ip?: Maybe<String>;
  message?: Maybe<String>;
  username?: Maybe<String>;
}

export interface PunbbBanUpdateInput {
  email?: Maybe<String>;
  expire?: Maybe<Int>;
  ip?: Maybe<String>;
  message?: Maybe<String>;
  username?: Maybe<String>;
}

export interface PunbbBanUpdateManyMutationInput {
  email?: Maybe<String>;
  expire?: Maybe<Int>;
  ip?: Maybe<String>;
  message?: Maybe<String>;
  username?: Maybe<String>;
}

export interface PunbbCategoryCreateInput {
  id?: Maybe<Int>;
  catName?: Maybe<String>;
  dispPosition?: Maybe<Int>;
}

export interface PunbbCategoryUpdateInput {
  catName?: Maybe<String>;
  dispPosition?: Maybe<Int>;
}

export interface PunbbCategoryUpdateManyMutationInput {
  catName?: Maybe<String>;
  dispPosition?: Maybe<Int>;
}

export interface PunbbForumCreateInput {
  id?: Maybe<Int>;
  catId?: Maybe<Int>;
  dispPosition?: Maybe<Int>;
  forumDesc?: Maybe<String>;
  forumName?: Maybe<String>;
  lastPost?: Maybe<Int>;
  lastPoster?: Maybe<String>;
  lastPostId?: Maybe<Int>;
  moderators?: Maybe<String>;
  redirectUrl?: Maybe<String>;
  sortBy?: Maybe<Boolean>;
}

export interface PunbbForumUpdateInput {
  catId?: Maybe<Int>;
  dispPosition?: Maybe<Int>;
  forumDesc?: Maybe<String>;
  forumName?: Maybe<String>;
  lastPost?: Maybe<Int>;
  lastPoster?: Maybe<String>;
  lastPostId?: Maybe<Int>;
  moderators?: Maybe<String>;
  redirectUrl?: Maybe<String>;
  sortBy?: Maybe<Boolean>;
}

export interface PunbbForumUpdateManyMutationInput {
  catId?: Maybe<Int>;
  dispPosition?: Maybe<Int>;
  forumDesc?: Maybe<String>;
  forumName?: Maybe<String>;
  lastPost?: Maybe<Int>;
  lastPoster?: Maybe<String>;
  lastPostId?: Maybe<Int>;
  moderators?: Maybe<String>;
  redirectUrl?: Maybe<String>;
  sortBy?: Maybe<Boolean>;
}

export interface PunbbOnlineCreateInput {
  ident?: Maybe<String>;
  idle?: Maybe<Boolean>;
  logged?: Maybe<Int>;
  userId?: Maybe<Int>;
}

export interface PunbbOnlineUpdateInput {
  ident?: Maybe<String>;
  idle?: Maybe<Boolean>;
  logged?: Maybe<Int>;
}

export interface PunbbOnlineUpdateManyMutationInput {
  ident?: Maybe<String>;
  idle?: Maybe<Boolean>;
  logged?: Maybe<Int>;
}

export interface PunbbPostCreateInput {
  id?: Maybe<Int>;
  edited?: Maybe<Int>;
  editedBy?: Maybe<String>;
  hideSmilies?: Maybe<Boolean>;
  message: String;
  posted?: Maybe<Int>;
  poster?: Maybe<String>;
  posterEmail?: Maybe<String>;
  posterId?: Maybe<Int>;
  posterIp?: Maybe<String>;
  topicId?: Maybe<Int>;
}

export interface PunbbPostUpdateInput {
  edited?: Maybe<Int>;
  editedBy?: Maybe<String>;
  hideSmilies?: Maybe<Boolean>;
  message?: Maybe<String>;
  posted?: Maybe<Int>;
  poster?: Maybe<String>;
  posterEmail?: Maybe<String>;
  posterId?: Maybe<Int>;
  posterIp?: Maybe<String>;
  topicId?: Maybe<Int>;
}

export interface PunbbPostUpdateManyMutationInput {
  edited?: Maybe<Int>;
  editedBy?: Maybe<String>;
  hideSmilies?: Maybe<Boolean>;
  message?: Maybe<String>;
  posted?: Maybe<Int>;
  poster?: Maybe<String>;
  posterEmail?: Maybe<String>;
  posterId?: Maybe<Int>;
  posterIp?: Maybe<String>;
  topicId?: Maybe<Int>;
}

export interface PunbbTopicCreateInput {
  id?: Maybe<Int>;
  closed?: Maybe<Boolean>;
  forumId?: Maybe<Int>;
  lastPost?: Maybe<Int>;
  lastPoster?: Maybe<String>;
  lastPostId?: Maybe<Int>;
  movedTo?: Maybe<Int>;
  no: String;
  posted?: Maybe<Int>;
  poster?: Maybe<String>;
  question: String;
  sticky?: Maybe<Boolean>;
  subject?: Maybe<String>;
  yes: String;
}

export interface PunbbTopicUpdateInput {
  closed?: Maybe<Boolean>;
  forumId?: Maybe<Int>;
  lastPost?: Maybe<Int>;
  lastPoster?: Maybe<String>;
  lastPostId?: Maybe<Int>;
  movedTo?: Maybe<Int>;
  no?: Maybe<String>;
  posted?: Maybe<Int>;
  poster?: Maybe<String>;
  question?: Maybe<String>;
  sticky?: Maybe<Boolean>;
  subject?: Maybe<String>;
  yes?: Maybe<String>;
}

export interface PunbbTopicUpdateManyMutationInput {
  closed?: Maybe<Boolean>;
  forumId?: Maybe<Int>;
  lastPost?: Maybe<Int>;
  lastPoster?: Maybe<String>;
  lastPostId?: Maybe<Int>;
  movedTo?: Maybe<Int>;
  no?: Maybe<String>;
  posted?: Maybe<Int>;
  poster?: Maybe<String>;
  question?: Maybe<String>;
  sticky?: Maybe<Boolean>;
  subject?: Maybe<String>;
  yes?: Maybe<String>;
}

export interface PunbbUploadedCreateInput {
  id?: Maybe<Int>;
  data: Int;
  descr: String;
  downs: Int;
  file: String;
  size: Int;
  uid: Int;
  user: String;
  userStat: String;
}

export interface PunbbUploadedUpdateInput {
  data?: Maybe<Int>;
  descr?: Maybe<String>;
  downs?: Maybe<Int>;
  file?: Maybe<String>;
  size?: Maybe<Int>;
  uid?: Maybe<Int>;
  user?: Maybe<String>;
  userStat?: Maybe<String>;
}

export interface PunbbUploadedUpdateManyMutationInput {
  data?: Maybe<Int>;
  descr?: Maybe<String>;
  downs?: Maybe<Int>;
  file?: Maybe<String>;
  size?: Maybe<Int>;
  uid?: Maybe<Int>;
  user?: Maybe<String>;
  userStat?: Maybe<String>;
}

export interface PunbbUserCreateInput {
  id?: Maybe<Int>;
  activateKey?: Maybe<String>;
  activateString?: Maybe<String>;
  adminNote?: Maybe<String>;
  aim?: Maybe<String>;
  dispPosts?: Maybe<Boolean>;
  dispTopics?: Maybe<Boolean>;
  email?: Maybe<String>;
  emailSetting?: Maybe<Boolean>;
  groupId?: Maybe<Int>;
  icq?: Maybe<String>;
  jabber?: Maybe<String>;
  language?: Maybe<String>;
  lastPost?: Maybe<Int>;
  lastVisit?: Maybe<Int>;
  location?: Maybe<String>;
  msn?: Maybe<String>;
  notifyWithPost?: Maybe<Boolean>;
  numPosts?: Maybe<Int>;
  password?: Maybe<String>;
  readTopics?: Maybe<String>;
  realname?: Maybe<String>;
  registered?: Maybe<Int>;
  registrationIp?: Maybe<String>;
  savePass?: Maybe<Boolean>;
  showAvatars?: Maybe<Boolean>;
  showImg?: Maybe<Boolean>;
  showImgSig?: Maybe<Boolean>;
  showSig?: Maybe<Boolean>;
  showSmilies?: Maybe<Boolean>;
  signature?: Maybe<String>;
  style?: Maybe<String>;
  timezone?: Maybe<Float>;
  title?: Maybe<String>;
  url?: Maybe<String>;
  useAvatar?: Maybe<Boolean>;
  username?: Maybe<String>;
  yahoo?: Maybe<String>;
}

export interface PunbbUserUpdateInput {
  activateKey?: Maybe<String>;
  activateString?: Maybe<String>;
  adminNote?: Maybe<String>;
  aim?: Maybe<String>;
  dispPosts?: Maybe<Boolean>;
  dispTopics?: Maybe<Boolean>;
  email?: Maybe<String>;
  emailSetting?: Maybe<Boolean>;
  groupId?: Maybe<Int>;
  icq?: Maybe<String>;
  jabber?: Maybe<String>;
  language?: Maybe<String>;
  lastPost?: Maybe<Int>;
  lastVisit?: Maybe<Int>;
  location?: Maybe<String>;
  msn?: Maybe<String>;
  notifyWithPost?: Maybe<Boolean>;
  numPosts?: Maybe<Int>;
  password?: Maybe<String>;
  readTopics?: Maybe<String>;
  realname?: Maybe<String>;
  registered?: Maybe<Int>;
  registrationIp?: Maybe<String>;
  savePass?: Maybe<Boolean>;
  showAvatars?: Maybe<Boolean>;
  showImg?: Maybe<Boolean>;
  showImgSig?: Maybe<Boolean>;
  showSig?: Maybe<Boolean>;
  showSmilies?: Maybe<Boolean>;
  signature?: Maybe<String>;
  style?: Maybe<String>;
  timezone?: Maybe<Float>;
  title?: Maybe<String>;
  url?: Maybe<String>;
  useAvatar?: Maybe<Boolean>;
  username?: Maybe<String>;
  yahoo?: Maybe<String>;
}

export interface PunbbUserUpdateManyMutationInput {
  activateKey?: Maybe<String>;
  activateString?: Maybe<String>;
  adminNote?: Maybe<String>;
  aim?: Maybe<String>;
  dispPosts?: Maybe<Boolean>;
  dispTopics?: Maybe<Boolean>;
  email?: Maybe<String>;
  emailSetting?: Maybe<Boolean>;
  groupId?: Maybe<Int>;
  icq?: Maybe<String>;
  jabber?: Maybe<String>;
  language?: Maybe<String>;
  lastPost?: Maybe<Int>;
  lastVisit?: Maybe<Int>;
  location?: Maybe<String>;
  msn?: Maybe<String>;
  notifyWithPost?: Maybe<Boolean>;
  numPosts?: Maybe<Int>;
  password?: Maybe<String>;
  readTopics?: Maybe<String>;
  realname?: Maybe<String>;
  registered?: Maybe<Int>;
  registrationIp?: Maybe<String>;
  savePass?: Maybe<Boolean>;
  showAvatars?: Maybe<Boolean>;
  showImg?: Maybe<Boolean>;
  showImgSig?: Maybe<Boolean>;
  showSig?: Maybe<Boolean>;
  showSmilies?: Maybe<Boolean>;
  signature?: Maybe<String>;
  style?: Maybe<String>;
  timezone?: Maybe<Float>;
  title?: Maybe<String>;
  url?: Maybe<String>;
  useAvatar?: Maybe<Boolean>;
  username?: Maybe<String>;
  yahoo?: Maybe<String>;
}

export interface PunbbBanSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PunbbBanWhereInput>;
  AND?: Maybe<
    PunbbBanSubscriptionWhereInput[] | PunbbBanSubscriptionWhereInput
  >;
  OR?: Maybe<PunbbBanSubscriptionWhereInput[] | PunbbBanSubscriptionWhereInput>;
  NOT?: Maybe<
    PunbbBanSubscriptionWhereInput[] | PunbbBanSubscriptionWhereInput
  >;
}

export interface PunbbCategorySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PunbbCategoryWhereInput>;
  AND?: Maybe<
    PunbbCategorySubscriptionWhereInput[] | PunbbCategorySubscriptionWhereInput
  >;
  OR?: Maybe<
    PunbbCategorySubscriptionWhereInput[] | PunbbCategorySubscriptionWhereInput
  >;
  NOT?: Maybe<
    PunbbCategorySubscriptionWhereInput[] | PunbbCategorySubscriptionWhereInput
  >;
}

export interface PunbbForumSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PunbbForumWhereInput>;
  AND?: Maybe<
    PunbbForumSubscriptionWhereInput[] | PunbbForumSubscriptionWhereInput
  >;
  OR?: Maybe<
    PunbbForumSubscriptionWhereInput[] | PunbbForumSubscriptionWhereInput
  >;
  NOT?: Maybe<
    PunbbForumSubscriptionWhereInput[] | PunbbForumSubscriptionWhereInput
  >;
}

export interface PunbbOnlineSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PunbbOnlineWhereInput>;
  AND?: Maybe<
    PunbbOnlineSubscriptionWhereInput[] | PunbbOnlineSubscriptionWhereInput
  >;
  OR?: Maybe<
    PunbbOnlineSubscriptionWhereInput[] | PunbbOnlineSubscriptionWhereInput
  >;
  NOT?: Maybe<
    PunbbOnlineSubscriptionWhereInput[] | PunbbOnlineSubscriptionWhereInput
  >;
}

export interface PunbbPostSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PunbbPostWhereInput>;
  AND?: Maybe<
    PunbbPostSubscriptionWhereInput[] | PunbbPostSubscriptionWhereInput
  >;
  OR?: Maybe<
    PunbbPostSubscriptionWhereInput[] | PunbbPostSubscriptionWhereInput
  >;
  NOT?: Maybe<
    PunbbPostSubscriptionWhereInput[] | PunbbPostSubscriptionWhereInput
  >;
}

export interface PunbbTopicSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PunbbTopicWhereInput>;
  AND?: Maybe<
    PunbbTopicSubscriptionWhereInput[] | PunbbTopicSubscriptionWhereInput
  >;
  OR?: Maybe<
    PunbbTopicSubscriptionWhereInput[] | PunbbTopicSubscriptionWhereInput
  >;
  NOT?: Maybe<
    PunbbTopicSubscriptionWhereInput[] | PunbbTopicSubscriptionWhereInput
  >;
}

export interface PunbbUploadedSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PunbbUploadedWhereInput>;
  AND?: Maybe<
    PunbbUploadedSubscriptionWhereInput[] | PunbbUploadedSubscriptionWhereInput
  >;
  OR?: Maybe<
    PunbbUploadedSubscriptionWhereInput[] | PunbbUploadedSubscriptionWhereInput
  >;
  NOT?: Maybe<
    PunbbUploadedSubscriptionWhereInput[] | PunbbUploadedSubscriptionWhereInput
  >;
}

export interface PunbbUserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PunbbUserWhereInput>;
  AND?: Maybe<
    PunbbUserSubscriptionWhereInput[] | PunbbUserSubscriptionWhereInput
  >;
  OR?: Maybe<
    PunbbUserSubscriptionWhereInput[] | PunbbUserSubscriptionWhereInput
  >;
  NOT?: Maybe<
    PunbbUserSubscriptionWhereInput[] | PunbbUserSubscriptionWhereInput
  >;
}

export interface NodeNode {
  id: ID_Output;
}

export interface PunbbBan {
  id: Int;
  email?: String;
  expire?: Int;
  ip?: String;
  message?: String;
  username?: String;
}

export interface PunbbBanPromise extends Promise<PunbbBan>, Fragmentable {
  id: () => Promise<Int>;
  email: () => Promise<String>;
  expire: () => Promise<Int>;
  ip: () => Promise<String>;
  message: () => Promise<String>;
  username: () => Promise<String>;
}

export interface PunbbBanSubscription
  extends Promise<AsyncIterator<PunbbBan>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  email: () => Promise<AsyncIterator<String>>;
  expire: () => Promise<AsyncIterator<Int>>;
  ip: () => Promise<AsyncIterator<String>>;
  message: () => Promise<AsyncIterator<String>>;
  username: () => Promise<AsyncIterator<String>>;
}

export interface PunbbBanNullablePromise
  extends Promise<PunbbBan | null>,
    Fragmentable {
  id: () => Promise<Int>;
  email: () => Promise<String>;
  expire: () => Promise<Int>;
  ip: () => Promise<String>;
  message: () => Promise<String>;
  username: () => Promise<String>;
}

export interface PunbbBanConnection {
  pageInfo: PageInfo;
  edges: PunbbBanEdge[];
}

export interface PunbbBanConnectionPromise
  extends Promise<PunbbBanConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PunbbBanEdge>>() => T;
  aggregate: <T = AggregatePunbbBanPromise>() => T;
}

export interface PunbbBanConnectionSubscription
  extends Promise<AsyncIterator<PunbbBanConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PunbbBanEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePunbbBanSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface PunbbBanEdge {
  node: PunbbBan;
  cursor: String;
}

export interface PunbbBanEdgePromise
  extends Promise<PunbbBanEdge>,
    Fragmentable {
  node: <T = PunbbBanPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PunbbBanEdgeSubscription
  extends Promise<AsyncIterator<PunbbBanEdge>>,
    Fragmentable {
  node: <T = PunbbBanSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePunbbBan {
  count: Int;
}

export interface AggregatePunbbBanPromise
  extends Promise<AggregatePunbbBan>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePunbbBanSubscription
  extends Promise<AsyncIterator<AggregatePunbbBan>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PunbbCategory {
  id: Int;
  catName: String;
  dispPosition: Int;
}

export interface PunbbCategoryPromise
  extends Promise<PunbbCategory>,
    Fragmentable {
  id: () => Promise<Int>;
  catName: () => Promise<String>;
  dispPosition: () => Promise<Int>;
}

export interface PunbbCategorySubscription
  extends Promise<AsyncIterator<PunbbCategory>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  catName: () => Promise<AsyncIterator<String>>;
  dispPosition: () => Promise<AsyncIterator<Int>>;
}

export interface PunbbCategoryNullablePromise
  extends Promise<PunbbCategory | null>,
    Fragmentable {
  id: () => Promise<Int>;
  catName: () => Promise<String>;
  dispPosition: () => Promise<Int>;
}

export interface PunbbCategoryConnection {
  pageInfo: PageInfo;
  edges: PunbbCategoryEdge[];
}

export interface PunbbCategoryConnectionPromise
  extends Promise<PunbbCategoryConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PunbbCategoryEdge>>() => T;
  aggregate: <T = AggregatePunbbCategoryPromise>() => T;
}

export interface PunbbCategoryConnectionSubscription
  extends Promise<AsyncIterator<PunbbCategoryConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PunbbCategoryEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePunbbCategorySubscription>() => T;
}

export interface PunbbCategoryEdge {
  node: PunbbCategory;
  cursor: String;
}

export interface PunbbCategoryEdgePromise
  extends Promise<PunbbCategoryEdge>,
    Fragmentable {
  node: <T = PunbbCategoryPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PunbbCategoryEdgeSubscription
  extends Promise<AsyncIterator<PunbbCategoryEdge>>,
    Fragmentable {
  node: <T = PunbbCategorySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePunbbCategory {
  count: Int;
}

export interface AggregatePunbbCategoryPromise
  extends Promise<AggregatePunbbCategory>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePunbbCategorySubscription
  extends Promise<AsyncIterator<AggregatePunbbCategory>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PunbbForum {
  id: Int;
  catId: Int;
  dispPosition: Int;
  forumDesc?: String;
  forumName: String;
  lastPost?: Int;
  lastPoster?: String;
  lastPostId?: Int;
  moderators?: String;
  redirectUrl?: String;
  sortBy: Boolean;
}

export interface PunbbForumPromise extends Promise<PunbbForum>, Fragmentable {
  id: () => Promise<Int>;
  catId: () => Promise<Int>;
  dispPosition: () => Promise<Int>;
  forumDesc: () => Promise<String>;
  forumName: () => Promise<String>;
  lastPost: () => Promise<Int>;
  lastPoster: () => Promise<String>;
  lastPostId: () => Promise<Int>;
  moderators: () => Promise<String>;
  redirectUrl: () => Promise<String>;
  sortBy: () => Promise<Boolean>;
}

export interface PunbbForumSubscription
  extends Promise<AsyncIterator<PunbbForum>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  catId: () => Promise<AsyncIterator<Int>>;
  dispPosition: () => Promise<AsyncIterator<Int>>;
  forumDesc: () => Promise<AsyncIterator<String>>;
  forumName: () => Promise<AsyncIterator<String>>;
  lastPost: () => Promise<AsyncIterator<Int>>;
  lastPoster: () => Promise<AsyncIterator<String>>;
  lastPostId: () => Promise<AsyncIterator<Int>>;
  moderators: () => Promise<AsyncIterator<String>>;
  redirectUrl: () => Promise<AsyncIterator<String>>;
  sortBy: () => Promise<AsyncIterator<Boolean>>;
}

export interface PunbbForumNullablePromise
  extends Promise<PunbbForum | null>,
    Fragmentable {
  id: () => Promise<Int>;
  catId: () => Promise<Int>;
  dispPosition: () => Promise<Int>;
  forumDesc: () => Promise<String>;
  forumName: () => Promise<String>;
  lastPost: () => Promise<Int>;
  lastPoster: () => Promise<String>;
  lastPostId: () => Promise<Int>;
  moderators: () => Promise<String>;
  redirectUrl: () => Promise<String>;
  sortBy: () => Promise<Boolean>;
}

export interface PunbbForumConnection {
  pageInfo: PageInfo;
  edges: PunbbForumEdge[];
}

export interface PunbbForumConnectionPromise
  extends Promise<PunbbForumConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PunbbForumEdge>>() => T;
  aggregate: <T = AggregatePunbbForumPromise>() => T;
}

export interface PunbbForumConnectionSubscription
  extends Promise<AsyncIterator<PunbbForumConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PunbbForumEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePunbbForumSubscription>() => T;
}

export interface PunbbForumEdge {
  node: PunbbForum;
  cursor: String;
}

export interface PunbbForumEdgePromise
  extends Promise<PunbbForumEdge>,
    Fragmentable {
  node: <T = PunbbForumPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PunbbForumEdgeSubscription
  extends Promise<AsyncIterator<PunbbForumEdge>>,
    Fragmentable {
  node: <T = PunbbForumSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePunbbForum {
  count: Int;
}

export interface AggregatePunbbForumPromise
  extends Promise<AggregatePunbbForum>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePunbbForumSubscription
  extends Promise<AsyncIterator<AggregatePunbbForum>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PunbbOnline {
  ident: String;
  idle: Boolean;
  logged: Int;
  userId: Int;
}

export interface PunbbOnlinePromise extends Promise<PunbbOnline>, Fragmentable {
  ident: () => Promise<String>;
  idle: () => Promise<Boolean>;
  logged: () => Promise<Int>;
  userId: () => Promise<Int>;
}

export interface PunbbOnlineSubscription
  extends Promise<AsyncIterator<PunbbOnline>>,
    Fragmentable {
  ident: () => Promise<AsyncIterator<String>>;
  idle: () => Promise<AsyncIterator<Boolean>>;
  logged: () => Promise<AsyncIterator<Int>>;
  userId: () => Promise<AsyncIterator<Int>>;
}

export interface PunbbOnlineNullablePromise
  extends Promise<PunbbOnline | null>,
    Fragmentable {
  ident: () => Promise<String>;
  idle: () => Promise<Boolean>;
  logged: () => Promise<Int>;
  userId: () => Promise<Int>;
}

export interface PunbbOnlineConnection {
  pageInfo: PageInfo;
  edges: PunbbOnlineEdge[];
}

export interface PunbbOnlineConnectionPromise
  extends Promise<PunbbOnlineConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PunbbOnlineEdge>>() => T;
  aggregate: <T = AggregatePunbbOnlinePromise>() => T;
}

export interface PunbbOnlineConnectionSubscription
  extends Promise<AsyncIterator<PunbbOnlineConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PunbbOnlineEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePunbbOnlineSubscription>() => T;
}

export interface PunbbOnlineEdge {
  node: PunbbOnline;
  cursor: String;
}

export interface PunbbOnlineEdgePromise
  extends Promise<PunbbOnlineEdge>,
    Fragmentable {
  node: <T = PunbbOnlinePromise>() => T;
  cursor: () => Promise<String>;
}

export interface PunbbOnlineEdgeSubscription
  extends Promise<AsyncIterator<PunbbOnlineEdge>>,
    Fragmentable {
  node: <T = PunbbOnlineSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePunbbOnline {
  count: Int;
}

export interface AggregatePunbbOnlinePromise
  extends Promise<AggregatePunbbOnline>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePunbbOnlineSubscription
  extends Promise<AsyncIterator<AggregatePunbbOnline>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PunbbPost {
  id: Int;
  edited?: Int;
  editedBy?: String;
  hideSmilies: Boolean;
  message: String;
  posted: Int;
  poster: String;
  posterEmail?: String;
  posterId: Int;
  posterIp?: String;
  topicId: Int;
}

export interface PunbbPostPromise extends Promise<PunbbPost>, Fragmentable {
  id: () => Promise<Int>;
  edited: () => Promise<Int>;
  editedBy: () => Promise<String>;
  hideSmilies: () => Promise<Boolean>;
  message: () => Promise<String>;
  posted: () => Promise<Int>;
  poster: () => Promise<String>;
  posterEmail: () => Promise<String>;
  posterId: () => Promise<Int>;
  posterIp: () => Promise<String>;
  topicId: () => Promise<Int>;
}

export interface PunbbPostSubscription
  extends Promise<AsyncIterator<PunbbPost>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  edited: () => Promise<AsyncIterator<Int>>;
  editedBy: () => Promise<AsyncIterator<String>>;
  hideSmilies: () => Promise<AsyncIterator<Boolean>>;
  message: () => Promise<AsyncIterator<String>>;
  posted: () => Promise<AsyncIterator<Int>>;
  poster: () => Promise<AsyncIterator<String>>;
  posterEmail: () => Promise<AsyncIterator<String>>;
  posterId: () => Promise<AsyncIterator<Int>>;
  posterIp: () => Promise<AsyncIterator<String>>;
  topicId: () => Promise<AsyncIterator<Int>>;
}

export interface PunbbPostNullablePromise
  extends Promise<PunbbPost | null>,
    Fragmentable {
  id: () => Promise<Int>;
  edited: () => Promise<Int>;
  editedBy: () => Promise<String>;
  hideSmilies: () => Promise<Boolean>;
  message: () => Promise<String>;
  posted: () => Promise<Int>;
  poster: () => Promise<String>;
  posterEmail: () => Promise<String>;
  posterId: () => Promise<Int>;
  posterIp: () => Promise<String>;
  topicId: () => Promise<Int>;
}

export interface PunbbPostConnection {
  pageInfo: PageInfo;
  edges: PunbbPostEdge[];
}

export interface PunbbPostConnectionPromise
  extends Promise<PunbbPostConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PunbbPostEdge>>() => T;
  aggregate: <T = AggregatePunbbPostPromise>() => T;
}

export interface PunbbPostConnectionSubscription
  extends Promise<AsyncIterator<PunbbPostConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PunbbPostEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePunbbPostSubscription>() => T;
}

export interface PunbbPostEdge {
  node: PunbbPost;
  cursor: String;
}

export interface PunbbPostEdgePromise
  extends Promise<PunbbPostEdge>,
    Fragmentable {
  node: <T = PunbbPostPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PunbbPostEdgeSubscription
  extends Promise<AsyncIterator<PunbbPostEdge>>,
    Fragmentable {
  node: <T = PunbbPostSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePunbbPost {
  count: Int;
}

export interface AggregatePunbbPostPromise
  extends Promise<AggregatePunbbPost>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePunbbPostSubscription
  extends Promise<AsyncIterator<AggregatePunbbPost>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PunbbTopic {
  id: Int;
  closed: Boolean;
  forumId: Int;
  lastPost: Int;
  lastPoster?: String;
  lastPostId: Int;
  movedTo?: Int;
  no: String;
  posted: Int;
  poster: String;
  question: String;
  sticky: Boolean;
  subject: String;
  yes: String;
}

export interface PunbbTopicPromise extends Promise<PunbbTopic>, Fragmentable {
  id: () => Promise<Int>;
  closed: () => Promise<Boolean>;
  forumId: () => Promise<Int>;
  lastPost: () => Promise<Int>;
  lastPoster: () => Promise<String>;
  lastPostId: () => Promise<Int>;
  movedTo: () => Promise<Int>;
  no: () => Promise<String>;
  posted: () => Promise<Int>;
  poster: () => Promise<String>;
  question: () => Promise<String>;
  sticky: () => Promise<Boolean>;
  subject: () => Promise<String>;
  yes: () => Promise<String>;
}

export interface PunbbTopicSubscription
  extends Promise<AsyncIterator<PunbbTopic>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  closed: () => Promise<AsyncIterator<Boolean>>;
  forumId: () => Promise<AsyncIterator<Int>>;
  lastPost: () => Promise<AsyncIterator<Int>>;
  lastPoster: () => Promise<AsyncIterator<String>>;
  lastPostId: () => Promise<AsyncIterator<Int>>;
  movedTo: () => Promise<AsyncIterator<Int>>;
  no: () => Promise<AsyncIterator<String>>;
  posted: () => Promise<AsyncIterator<Int>>;
  poster: () => Promise<AsyncIterator<String>>;
  question: () => Promise<AsyncIterator<String>>;
  sticky: () => Promise<AsyncIterator<Boolean>>;
  subject: () => Promise<AsyncIterator<String>>;
  yes: () => Promise<AsyncIterator<String>>;
}

export interface PunbbTopicNullablePromise
  extends Promise<PunbbTopic | null>,
    Fragmentable {
  id: () => Promise<Int>;
  closed: () => Promise<Boolean>;
  forumId: () => Promise<Int>;
  lastPost: () => Promise<Int>;
  lastPoster: () => Promise<String>;
  lastPostId: () => Promise<Int>;
  movedTo: () => Promise<Int>;
  no: () => Promise<String>;
  posted: () => Promise<Int>;
  poster: () => Promise<String>;
  question: () => Promise<String>;
  sticky: () => Promise<Boolean>;
  subject: () => Promise<String>;
  yes: () => Promise<String>;
}

export interface PunbbTopicConnection {
  pageInfo: PageInfo;
  edges: PunbbTopicEdge[];
}

export interface PunbbTopicConnectionPromise
  extends Promise<PunbbTopicConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PunbbTopicEdge>>() => T;
  aggregate: <T = AggregatePunbbTopicPromise>() => T;
}

export interface PunbbTopicConnectionSubscription
  extends Promise<AsyncIterator<PunbbTopicConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PunbbTopicEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePunbbTopicSubscription>() => T;
}

export interface PunbbTopicEdge {
  node: PunbbTopic;
  cursor: String;
}

export interface PunbbTopicEdgePromise
  extends Promise<PunbbTopicEdge>,
    Fragmentable {
  node: <T = PunbbTopicPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PunbbTopicEdgeSubscription
  extends Promise<AsyncIterator<PunbbTopicEdge>>,
    Fragmentable {
  node: <T = PunbbTopicSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePunbbTopic {
  count: Int;
}

export interface AggregatePunbbTopicPromise
  extends Promise<AggregatePunbbTopic>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePunbbTopicSubscription
  extends Promise<AsyncIterator<AggregatePunbbTopic>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PunbbUploaded {
  id: Int;
  data: Int;
  descr: String;
  downs: Int;
  file: String;
  size: Int;
  uid: Int;
  user: String;
  userStat: String;
}

export interface PunbbUploadedPromise
  extends Promise<PunbbUploaded>,
    Fragmentable {
  id: () => Promise<Int>;
  data: () => Promise<Int>;
  descr: () => Promise<String>;
  downs: () => Promise<Int>;
  file: () => Promise<String>;
  size: () => Promise<Int>;
  uid: () => Promise<Int>;
  user: () => Promise<String>;
  userStat: () => Promise<String>;
}

export interface PunbbUploadedSubscription
  extends Promise<AsyncIterator<PunbbUploaded>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  data: () => Promise<AsyncIterator<Int>>;
  descr: () => Promise<AsyncIterator<String>>;
  downs: () => Promise<AsyncIterator<Int>>;
  file: () => Promise<AsyncIterator<String>>;
  size: () => Promise<AsyncIterator<Int>>;
  uid: () => Promise<AsyncIterator<Int>>;
  user: () => Promise<AsyncIterator<String>>;
  userStat: () => Promise<AsyncIterator<String>>;
}

export interface PunbbUploadedNullablePromise
  extends Promise<PunbbUploaded | null>,
    Fragmentable {
  id: () => Promise<Int>;
  data: () => Promise<Int>;
  descr: () => Promise<String>;
  downs: () => Promise<Int>;
  file: () => Promise<String>;
  size: () => Promise<Int>;
  uid: () => Promise<Int>;
  user: () => Promise<String>;
  userStat: () => Promise<String>;
}

export interface PunbbUploadedConnection {
  pageInfo: PageInfo;
  edges: PunbbUploadedEdge[];
}

export interface PunbbUploadedConnectionPromise
  extends Promise<PunbbUploadedConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PunbbUploadedEdge>>() => T;
  aggregate: <T = AggregatePunbbUploadedPromise>() => T;
}

export interface PunbbUploadedConnectionSubscription
  extends Promise<AsyncIterator<PunbbUploadedConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PunbbUploadedEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePunbbUploadedSubscription>() => T;
}

export interface PunbbUploadedEdge {
  node: PunbbUploaded;
  cursor: String;
}

export interface PunbbUploadedEdgePromise
  extends Promise<PunbbUploadedEdge>,
    Fragmentable {
  node: <T = PunbbUploadedPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PunbbUploadedEdgeSubscription
  extends Promise<AsyncIterator<PunbbUploadedEdge>>,
    Fragmentable {
  node: <T = PunbbUploadedSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePunbbUploaded {
  count: Int;
}

export interface AggregatePunbbUploadedPromise
  extends Promise<AggregatePunbbUploaded>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePunbbUploadedSubscription
  extends Promise<AsyncIterator<AggregatePunbbUploaded>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PunbbUser {
  id: Int;
  activateKey?: String;
  activateString?: String;
  adminNote?: String;
  aim?: String;
  dispPosts?: Boolean;
  dispTopics?: Boolean;
  email: String;
  emailSetting: Boolean;
  groupId: Int;
  icq?: String;
  jabber?: String;
  language: String;
  lastPost?: Int;
  lastVisit: Int;
  location?: String;
  msn?: String;
  notifyWithPost: Boolean;
  numPosts: Int;
  password: String;
  readTopics?: String;
  realname?: String;
  registered: Int;
  registrationIp: String;
  savePass: Boolean;
  showAvatars: Boolean;
  showImg: Boolean;
  showImgSig: Boolean;
  showSig: Boolean;
  showSmilies: Boolean;
  signature?: String;
  style: String;
  timezone: Float;
  title?: String;
  url?: String;
  useAvatar: Boolean;
  username: String;
  yahoo?: String;
}

export interface PunbbUserPromise extends Promise<PunbbUser>, Fragmentable {
  id: () => Promise<Int>;
  activateKey: () => Promise<String>;
  activateString: () => Promise<String>;
  adminNote: () => Promise<String>;
  aim: () => Promise<String>;
  dispPosts: () => Promise<Boolean>;
  dispTopics: () => Promise<Boolean>;
  email: () => Promise<String>;
  emailSetting: () => Promise<Boolean>;
  groupId: () => Promise<Int>;
  icq: () => Promise<String>;
  jabber: () => Promise<String>;
  language: () => Promise<String>;
  lastPost: () => Promise<Int>;
  lastVisit: () => Promise<Int>;
  location: () => Promise<String>;
  msn: () => Promise<String>;
  notifyWithPost: () => Promise<Boolean>;
  numPosts: () => Promise<Int>;
  password: () => Promise<String>;
  readTopics: () => Promise<String>;
  realname: () => Promise<String>;
  registered: () => Promise<Int>;
  registrationIp: () => Promise<String>;
  savePass: () => Promise<Boolean>;
  showAvatars: () => Promise<Boolean>;
  showImg: () => Promise<Boolean>;
  showImgSig: () => Promise<Boolean>;
  showSig: () => Promise<Boolean>;
  showSmilies: () => Promise<Boolean>;
  signature: () => Promise<String>;
  style: () => Promise<String>;
  timezone: () => Promise<Float>;
  title: () => Promise<String>;
  url: () => Promise<String>;
  useAvatar: () => Promise<Boolean>;
  username: () => Promise<String>;
  yahoo: () => Promise<String>;
}

export interface PunbbUserSubscription
  extends Promise<AsyncIterator<PunbbUser>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  activateKey: () => Promise<AsyncIterator<String>>;
  activateString: () => Promise<AsyncIterator<String>>;
  adminNote: () => Promise<AsyncIterator<String>>;
  aim: () => Promise<AsyncIterator<String>>;
  dispPosts: () => Promise<AsyncIterator<Boolean>>;
  dispTopics: () => Promise<AsyncIterator<Boolean>>;
  email: () => Promise<AsyncIterator<String>>;
  emailSetting: () => Promise<AsyncIterator<Boolean>>;
  groupId: () => Promise<AsyncIterator<Int>>;
  icq: () => Promise<AsyncIterator<String>>;
  jabber: () => Promise<AsyncIterator<String>>;
  language: () => Promise<AsyncIterator<String>>;
  lastPost: () => Promise<AsyncIterator<Int>>;
  lastVisit: () => Promise<AsyncIterator<Int>>;
  location: () => Promise<AsyncIterator<String>>;
  msn: () => Promise<AsyncIterator<String>>;
  notifyWithPost: () => Promise<AsyncIterator<Boolean>>;
  numPosts: () => Promise<AsyncIterator<Int>>;
  password: () => Promise<AsyncIterator<String>>;
  readTopics: () => Promise<AsyncIterator<String>>;
  realname: () => Promise<AsyncIterator<String>>;
  registered: () => Promise<AsyncIterator<Int>>;
  registrationIp: () => Promise<AsyncIterator<String>>;
  savePass: () => Promise<AsyncIterator<Boolean>>;
  showAvatars: () => Promise<AsyncIterator<Boolean>>;
  showImg: () => Promise<AsyncIterator<Boolean>>;
  showImgSig: () => Promise<AsyncIterator<Boolean>>;
  showSig: () => Promise<AsyncIterator<Boolean>>;
  showSmilies: () => Promise<AsyncIterator<Boolean>>;
  signature: () => Promise<AsyncIterator<String>>;
  style: () => Promise<AsyncIterator<String>>;
  timezone: () => Promise<AsyncIterator<Float>>;
  title: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
  useAvatar: () => Promise<AsyncIterator<Boolean>>;
  username: () => Promise<AsyncIterator<String>>;
  yahoo: () => Promise<AsyncIterator<String>>;
}

export interface PunbbUserNullablePromise
  extends Promise<PunbbUser | null>,
    Fragmentable {
  id: () => Promise<Int>;
  activateKey: () => Promise<String>;
  activateString: () => Promise<String>;
  adminNote: () => Promise<String>;
  aim: () => Promise<String>;
  dispPosts: () => Promise<Boolean>;
  dispTopics: () => Promise<Boolean>;
  email: () => Promise<String>;
  emailSetting: () => Promise<Boolean>;
  groupId: () => Promise<Int>;
  icq: () => Promise<String>;
  jabber: () => Promise<String>;
  language: () => Promise<String>;
  lastPost: () => Promise<Int>;
  lastVisit: () => Promise<Int>;
  location: () => Promise<String>;
  msn: () => Promise<String>;
  notifyWithPost: () => Promise<Boolean>;
  numPosts: () => Promise<Int>;
  password: () => Promise<String>;
  readTopics: () => Promise<String>;
  realname: () => Promise<String>;
  registered: () => Promise<Int>;
  registrationIp: () => Promise<String>;
  savePass: () => Promise<Boolean>;
  showAvatars: () => Promise<Boolean>;
  showImg: () => Promise<Boolean>;
  showImgSig: () => Promise<Boolean>;
  showSig: () => Promise<Boolean>;
  showSmilies: () => Promise<Boolean>;
  signature: () => Promise<String>;
  style: () => Promise<String>;
  timezone: () => Promise<Float>;
  title: () => Promise<String>;
  url: () => Promise<String>;
  useAvatar: () => Promise<Boolean>;
  username: () => Promise<String>;
  yahoo: () => Promise<String>;
}

export interface PunbbUserConnection {
  pageInfo: PageInfo;
  edges: PunbbUserEdge[];
}

export interface PunbbUserConnectionPromise
  extends Promise<PunbbUserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PunbbUserEdge>>() => T;
  aggregate: <T = AggregatePunbbUserPromise>() => T;
}

export interface PunbbUserConnectionSubscription
  extends Promise<AsyncIterator<PunbbUserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PunbbUserEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePunbbUserSubscription>() => T;
}

export interface PunbbUserEdge {
  node: PunbbUser;
  cursor: String;
}

export interface PunbbUserEdgePromise
  extends Promise<PunbbUserEdge>,
    Fragmentable {
  node: <T = PunbbUserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PunbbUserEdgeSubscription
  extends Promise<AsyncIterator<PunbbUserEdge>>,
    Fragmentable {
  node: <T = PunbbUserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePunbbUser {
  count: Int;
}

export interface AggregatePunbbUserPromise
  extends Promise<AggregatePunbbUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePunbbUserSubscription
  extends Promise<AsyncIterator<AggregatePunbbUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface PunbbBanSubscriptionPayload {
  mutation: MutationType;
  node: PunbbBan;
  updatedFields: String[];
  previousValues: PunbbBanPreviousValues;
}

export interface PunbbBanSubscriptionPayloadPromise
  extends Promise<PunbbBanSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PunbbBanPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PunbbBanPreviousValuesPromise>() => T;
}

export interface PunbbBanSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PunbbBanSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PunbbBanSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PunbbBanPreviousValuesSubscription>() => T;
}

export interface PunbbBanPreviousValues {
  id: Int;
  email?: String;
  expire?: Int;
  ip?: String;
  message?: String;
  username?: String;
}

export interface PunbbBanPreviousValuesPromise
  extends Promise<PunbbBanPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  email: () => Promise<String>;
  expire: () => Promise<Int>;
  ip: () => Promise<String>;
  message: () => Promise<String>;
  username: () => Promise<String>;
}

export interface PunbbBanPreviousValuesSubscription
  extends Promise<AsyncIterator<PunbbBanPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  email: () => Promise<AsyncIterator<String>>;
  expire: () => Promise<AsyncIterator<Int>>;
  ip: () => Promise<AsyncIterator<String>>;
  message: () => Promise<AsyncIterator<String>>;
  username: () => Promise<AsyncIterator<String>>;
}

export interface PunbbCategorySubscriptionPayload {
  mutation: MutationType;
  node: PunbbCategory;
  updatedFields: String[];
  previousValues: PunbbCategoryPreviousValues;
}

export interface PunbbCategorySubscriptionPayloadPromise
  extends Promise<PunbbCategorySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PunbbCategoryPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PunbbCategoryPreviousValuesPromise>() => T;
}

export interface PunbbCategorySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PunbbCategorySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PunbbCategorySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PunbbCategoryPreviousValuesSubscription>() => T;
}

export interface PunbbCategoryPreviousValues {
  id: Int;
  catName: String;
  dispPosition: Int;
}

export interface PunbbCategoryPreviousValuesPromise
  extends Promise<PunbbCategoryPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  catName: () => Promise<String>;
  dispPosition: () => Promise<Int>;
}

export interface PunbbCategoryPreviousValuesSubscription
  extends Promise<AsyncIterator<PunbbCategoryPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  catName: () => Promise<AsyncIterator<String>>;
  dispPosition: () => Promise<AsyncIterator<Int>>;
}

export interface PunbbForumSubscriptionPayload {
  mutation: MutationType;
  node: PunbbForum;
  updatedFields: String[];
  previousValues: PunbbForumPreviousValues;
}

export interface PunbbForumSubscriptionPayloadPromise
  extends Promise<PunbbForumSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PunbbForumPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PunbbForumPreviousValuesPromise>() => T;
}

export interface PunbbForumSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PunbbForumSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PunbbForumSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PunbbForumPreviousValuesSubscription>() => T;
}

export interface PunbbForumPreviousValues {
  id: Int;
  catId: Int;
  dispPosition: Int;
  forumDesc?: String;
  forumName: String;
  lastPost?: Int;
  lastPoster?: String;
  lastPostId?: Int;
  moderators?: String;
  redirectUrl?: String;
  sortBy: Boolean;
}

export interface PunbbForumPreviousValuesPromise
  extends Promise<PunbbForumPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  catId: () => Promise<Int>;
  dispPosition: () => Promise<Int>;
  forumDesc: () => Promise<String>;
  forumName: () => Promise<String>;
  lastPost: () => Promise<Int>;
  lastPoster: () => Promise<String>;
  lastPostId: () => Promise<Int>;
  moderators: () => Promise<String>;
  redirectUrl: () => Promise<String>;
  sortBy: () => Promise<Boolean>;
}

export interface PunbbForumPreviousValuesSubscription
  extends Promise<AsyncIterator<PunbbForumPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  catId: () => Promise<AsyncIterator<Int>>;
  dispPosition: () => Promise<AsyncIterator<Int>>;
  forumDesc: () => Promise<AsyncIterator<String>>;
  forumName: () => Promise<AsyncIterator<String>>;
  lastPost: () => Promise<AsyncIterator<Int>>;
  lastPoster: () => Promise<AsyncIterator<String>>;
  lastPostId: () => Promise<AsyncIterator<Int>>;
  moderators: () => Promise<AsyncIterator<String>>;
  redirectUrl: () => Promise<AsyncIterator<String>>;
  sortBy: () => Promise<AsyncIterator<Boolean>>;
}

export interface PunbbOnlineSubscriptionPayload {
  mutation: MutationType;
  node: PunbbOnline;
  updatedFields: String[];
  previousValues: PunbbOnlinePreviousValues;
}

export interface PunbbOnlineSubscriptionPayloadPromise
  extends Promise<PunbbOnlineSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PunbbOnlinePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PunbbOnlinePreviousValuesPromise>() => T;
}

export interface PunbbOnlineSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PunbbOnlineSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PunbbOnlineSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PunbbOnlinePreviousValuesSubscription>() => T;
}

export interface PunbbOnlinePreviousValues {
  ident: String;
  idle: Boolean;
  logged: Int;
  userId: Int;
}

export interface PunbbOnlinePreviousValuesPromise
  extends Promise<PunbbOnlinePreviousValues>,
    Fragmentable {
  ident: () => Promise<String>;
  idle: () => Promise<Boolean>;
  logged: () => Promise<Int>;
  userId: () => Promise<Int>;
}

export interface PunbbOnlinePreviousValuesSubscription
  extends Promise<AsyncIterator<PunbbOnlinePreviousValues>>,
    Fragmentable {
  ident: () => Promise<AsyncIterator<String>>;
  idle: () => Promise<AsyncIterator<Boolean>>;
  logged: () => Promise<AsyncIterator<Int>>;
  userId: () => Promise<AsyncIterator<Int>>;
}

export interface PunbbPostSubscriptionPayload {
  mutation: MutationType;
  node: PunbbPost;
  updatedFields: String[];
  previousValues: PunbbPostPreviousValues;
}

export interface PunbbPostSubscriptionPayloadPromise
  extends Promise<PunbbPostSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PunbbPostPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PunbbPostPreviousValuesPromise>() => T;
}

export interface PunbbPostSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PunbbPostSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PunbbPostSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PunbbPostPreviousValuesSubscription>() => T;
}

export interface PunbbPostPreviousValues {
  id: Int;
  edited?: Int;
  editedBy?: String;
  hideSmilies: Boolean;
  message: String;
  posted: Int;
  poster: String;
  posterEmail?: String;
  posterId: Int;
  posterIp?: String;
  topicId: Int;
}

export interface PunbbPostPreviousValuesPromise
  extends Promise<PunbbPostPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  edited: () => Promise<Int>;
  editedBy: () => Promise<String>;
  hideSmilies: () => Promise<Boolean>;
  message: () => Promise<String>;
  posted: () => Promise<Int>;
  poster: () => Promise<String>;
  posterEmail: () => Promise<String>;
  posterId: () => Promise<Int>;
  posterIp: () => Promise<String>;
  topicId: () => Promise<Int>;
}

export interface PunbbPostPreviousValuesSubscription
  extends Promise<AsyncIterator<PunbbPostPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  edited: () => Promise<AsyncIterator<Int>>;
  editedBy: () => Promise<AsyncIterator<String>>;
  hideSmilies: () => Promise<AsyncIterator<Boolean>>;
  message: () => Promise<AsyncIterator<String>>;
  posted: () => Promise<AsyncIterator<Int>>;
  poster: () => Promise<AsyncIterator<String>>;
  posterEmail: () => Promise<AsyncIterator<String>>;
  posterId: () => Promise<AsyncIterator<Int>>;
  posterIp: () => Promise<AsyncIterator<String>>;
  topicId: () => Promise<AsyncIterator<Int>>;
}

export interface PunbbTopicSubscriptionPayload {
  mutation: MutationType;
  node: PunbbTopic;
  updatedFields: String[];
  previousValues: PunbbTopicPreviousValues;
}

export interface PunbbTopicSubscriptionPayloadPromise
  extends Promise<PunbbTopicSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PunbbTopicPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PunbbTopicPreviousValuesPromise>() => T;
}

export interface PunbbTopicSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PunbbTopicSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PunbbTopicSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PunbbTopicPreviousValuesSubscription>() => T;
}

export interface PunbbTopicPreviousValues {
  id: Int;
  closed: Boolean;
  forumId: Int;
  lastPost: Int;
  lastPoster?: String;
  lastPostId: Int;
  movedTo?: Int;
  no: String;
  posted: Int;
  poster: String;
  question: String;
  sticky: Boolean;
  subject: String;
  yes: String;
}

export interface PunbbTopicPreviousValuesPromise
  extends Promise<PunbbTopicPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  closed: () => Promise<Boolean>;
  forumId: () => Promise<Int>;
  lastPost: () => Promise<Int>;
  lastPoster: () => Promise<String>;
  lastPostId: () => Promise<Int>;
  movedTo: () => Promise<Int>;
  no: () => Promise<String>;
  posted: () => Promise<Int>;
  poster: () => Promise<String>;
  question: () => Promise<String>;
  sticky: () => Promise<Boolean>;
  subject: () => Promise<String>;
  yes: () => Promise<String>;
}

export interface PunbbTopicPreviousValuesSubscription
  extends Promise<AsyncIterator<PunbbTopicPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  closed: () => Promise<AsyncIterator<Boolean>>;
  forumId: () => Promise<AsyncIterator<Int>>;
  lastPost: () => Promise<AsyncIterator<Int>>;
  lastPoster: () => Promise<AsyncIterator<String>>;
  lastPostId: () => Promise<AsyncIterator<Int>>;
  movedTo: () => Promise<AsyncIterator<Int>>;
  no: () => Promise<AsyncIterator<String>>;
  posted: () => Promise<AsyncIterator<Int>>;
  poster: () => Promise<AsyncIterator<String>>;
  question: () => Promise<AsyncIterator<String>>;
  sticky: () => Promise<AsyncIterator<Boolean>>;
  subject: () => Promise<AsyncIterator<String>>;
  yes: () => Promise<AsyncIterator<String>>;
}

export interface PunbbUploadedSubscriptionPayload {
  mutation: MutationType;
  node: PunbbUploaded;
  updatedFields: String[];
  previousValues: PunbbUploadedPreviousValues;
}

export interface PunbbUploadedSubscriptionPayloadPromise
  extends Promise<PunbbUploadedSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PunbbUploadedPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PunbbUploadedPreviousValuesPromise>() => T;
}

export interface PunbbUploadedSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PunbbUploadedSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PunbbUploadedSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PunbbUploadedPreviousValuesSubscription>() => T;
}

export interface PunbbUploadedPreviousValues {
  id: Int;
  data: Int;
  descr: String;
  downs: Int;
  file: String;
  size: Int;
  uid: Int;
  user: String;
  userStat: String;
}

export interface PunbbUploadedPreviousValuesPromise
  extends Promise<PunbbUploadedPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  data: () => Promise<Int>;
  descr: () => Promise<String>;
  downs: () => Promise<Int>;
  file: () => Promise<String>;
  size: () => Promise<Int>;
  uid: () => Promise<Int>;
  user: () => Promise<String>;
  userStat: () => Promise<String>;
}

export interface PunbbUploadedPreviousValuesSubscription
  extends Promise<AsyncIterator<PunbbUploadedPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  data: () => Promise<AsyncIterator<Int>>;
  descr: () => Promise<AsyncIterator<String>>;
  downs: () => Promise<AsyncIterator<Int>>;
  file: () => Promise<AsyncIterator<String>>;
  size: () => Promise<AsyncIterator<Int>>;
  uid: () => Promise<AsyncIterator<Int>>;
  user: () => Promise<AsyncIterator<String>>;
  userStat: () => Promise<AsyncIterator<String>>;
}

export interface PunbbUserSubscriptionPayload {
  mutation: MutationType;
  node: PunbbUser;
  updatedFields: String[];
  previousValues: PunbbUserPreviousValues;
}

export interface PunbbUserSubscriptionPayloadPromise
  extends Promise<PunbbUserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PunbbUserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PunbbUserPreviousValuesPromise>() => T;
}

export interface PunbbUserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PunbbUserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PunbbUserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PunbbUserPreviousValuesSubscription>() => T;
}

export interface PunbbUserPreviousValues {
  id: Int;
  activateKey?: String;
  activateString?: String;
  adminNote?: String;
  aim?: String;
  dispPosts?: Boolean;
  dispTopics?: Boolean;
  email: String;
  emailSetting: Boolean;
  groupId: Int;
  icq?: String;
  jabber?: String;
  language: String;
  lastPost?: Int;
  lastVisit: Int;
  location?: String;
  msn?: String;
  notifyWithPost: Boolean;
  numPosts: Int;
  password: String;
  readTopics?: String;
  realname?: String;
  registered: Int;
  registrationIp: String;
  savePass: Boolean;
  showAvatars: Boolean;
  showImg: Boolean;
  showImgSig: Boolean;
  showSig: Boolean;
  showSmilies: Boolean;
  signature?: String;
  style: String;
  timezone: Float;
  title?: String;
  url?: String;
  useAvatar: Boolean;
  username: String;
  yahoo?: String;
}

export interface PunbbUserPreviousValuesPromise
  extends Promise<PunbbUserPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  activateKey: () => Promise<String>;
  activateString: () => Promise<String>;
  adminNote: () => Promise<String>;
  aim: () => Promise<String>;
  dispPosts: () => Promise<Boolean>;
  dispTopics: () => Promise<Boolean>;
  email: () => Promise<String>;
  emailSetting: () => Promise<Boolean>;
  groupId: () => Promise<Int>;
  icq: () => Promise<String>;
  jabber: () => Promise<String>;
  language: () => Promise<String>;
  lastPost: () => Promise<Int>;
  lastVisit: () => Promise<Int>;
  location: () => Promise<String>;
  msn: () => Promise<String>;
  notifyWithPost: () => Promise<Boolean>;
  numPosts: () => Promise<Int>;
  password: () => Promise<String>;
  readTopics: () => Promise<String>;
  realname: () => Promise<String>;
  registered: () => Promise<Int>;
  registrationIp: () => Promise<String>;
  savePass: () => Promise<Boolean>;
  showAvatars: () => Promise<Boolean>;
  showImg: () => Promise<Boolean>;
  showImgSig: () => Promise<Boolean>;
  showSig: () => Promise<Boolean>;
  showSmilies: () => Promise<Boolean>;
  signature: () => Promise<String>;
  style: () => Promise<String>;
  timezone: () => Promise<Float>;
  title: () => Promise<String>;
  url: () => Promise<String>;
  useAvatar: () => Promise<Boolean>;
  username: () => Promise<String>;
  yahoo: () => Promise<String>;
}

export interface PunbbUserPreviousValuesSubscription
  extends Promise<AsyncIterator<PunbbUserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  activateKey: () => Promise<AsyncIterator<String>>;
  activateString: () => Promise<AsyncIterator<String>>;
  adminNote: () => Promise<AsyncIterator<String>>;
  aim: () => Promise<AsyncIterator<String>>;
  dispPosts: () => Promise<AsyncIterator<Boolean>>;
  dispTopics: () => Promise<AsyncIterator<Boolean>>;
  email: () => Promise<AsyncIterator<String>>;
  emailSetting: () => Promise<AsyncIterator<Boolean>>;
  groupId: () => Promise<AsyncIterator<Int>>;
  icq: () => Promise<AsyncIterator<String>>;
  jabber: () => Promise<AsyncIterator<String>>;
  language: () => Promise<AsyncIterator<String>>;
  lastPost: () => Promise<AsyncIterator<Int>>;
  lastVisit: () => Promise<AsyncIterator<Int>>;
  location: () => Promise<AsyncIterator<String>>;
  msn: () => Promise<AsyncIterator<String>>;
  notifyWithPost: () => Promise<AsyncIterator<Boolean>>;
  numPosts: () => Promise<AsyncIterator<Int>>;
  password: () => Promise<AsyncIterator<String>>;
  readTopics: () => Promise<AsyncIterator<String>>;
  realname: () => Promise<AsyncIterator<String>>;
  registered: () => Promise<AsyncIterator<Int>>;
  registrationIp: () => Promise<AsyncIterator<String>>;
  savePass: () => Promise<AsyncIterator<Boolean>>;
  showAvatars: () => Promise<AsyncIterator<Boolean>>;
  showImg: () => Promise<AsyncIterator<Boolean>>;
  showImgSig: () => Promise<AsyncIterator<Boolean>>;
  showSig: () => Promise<AsyncIterator<Boolean>>;
  showSmilies: () => Promise<AsyncIterator<Boolean>>;
  signature: () => Promise<AsyncIterator<String>>;
  style: () => Promise<AsyncIterator<String>>;
  timezone: () => Promise<AsyncIterator<Float>>;
  title: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
  useAvatar: () => Promise<AsyncIterator<Boolean>>;
  username: () => Promise<AsyncIterator<String>>;
  yahoo: () => Promise<AsyncIterator<String>>;
}

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
*/
export type Float = number;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "PunbbBan",
    embedded: false
  },
  {
    name: "PunbbCategory",
    embedded: false
  },
  {
    name: "PunbbForum",
    embedded: false
  },
  {
    name: "PunbbOnline",
    embedded: false
  },
  {
    name: "PunbbPost",
    embedded: false
  },
  {
    name: "PunbbTopic",
    embedded: false
  },
  {
    name: "PunbbUploaded",
    embedded: false
  },
  {
    name: "PunbbUser",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://localhost:4466`,
  secret: `triangle`
});
export const prisma = new Prisma();
