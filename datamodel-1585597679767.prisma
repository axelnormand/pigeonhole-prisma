type Elec2010Answer @db(name: "elec2010_answers") {
  id: Int! @id
  answer: String
  candidateId: Int @db(name: "candidate_id")
  created: DateTime
  modified: DateTime
  questionId: Int @db(name: "question_id")
}

type Elec2010Candidate @db(name: "elec2010_candidates") {
  id: Int! @id
  constituencyId: Int @db(name: "constituency_id")
  created: DateTime
  firstName: String @db(name: "first_name")
  modified: DateTime
  partyId: Int @db(name: "party_id")
  prefixId: Int @db(name: "prefix_id")
  surname: String
  uuid: String
  website: String
}

type Elec2010Constituency @db(name: "elec2010_constituencies") {
  id: Int! @id
  created: DateTime
  modified: DateTime
  name: String
  regionId: Int @db(name: "region_id")
}

type Elec2010Network @db(name: "elec2010_networks") {
  id: Int! @id
  created: DateTime
  description: String
  modified: DateTime
  title: String
  website: String
}

type Elec2010Party @db(name: "elec2010_parties") {
  id: Int! @id
  created: DateTime
  modified: DateTime
  name: String
  rgb: String
  website: String
}

type Elec2010Policy @db(name: "elec2010_policies") {
  id: Int! @id
  body: String
  created: DateTime
  modified: DateTime
  title: String
}

type Elec2010Prefix @db(name: "elec2010_prefixes") {
  id: Int! @id
  prefix: String
}

type Elec2010Question @db(name: "elec2010_questions") {
  id: Int! @id
  created: DateTime
  modified: DateTime
  question: String
}

type Elec2010Region @db(name: "elec2010_regions") {
  id: Int! @id
  created: DateTime
  modified: DateTime
  name: String
}

type Elec2010User @db(name: "elec2010_users") {
  id: Int! @id
  created: DateTime!
  lastLogin: DateTime! @db(name: "last_login")
  password: String!
  status: Boolean @default(value: 1)
  username: String!
}

type Fact @db(name: "facts") {
  fact_id: Int! @id
  factDate: DateTime! @db(name: "fact_date") @default(value: "0000-00-00 00:00:00")
  factItem: String! @db(name: "fact_item")
}

type Gig @db(name: "gigs") {
  gig_id: Int! @id
  gigDate: DateTime! @db(name: "gig_date") @default(value: "0000-00-00")
  gigDetails: String! @db(name: "gig_details")
  gigMap: String @db(name: "gig_map")
  gigPromotion: String @db(name: "gig_promotion")
  gigVenue: String! @db(name: "gig_venue") @default(value: "")
}

type News @db(name: "news") {
  news_id: Int! @id
  newsDate: DateTime! @db(name: "news_date") @default(value: "0000-00-00 00:00:00")
  newsItem: String! @db(name: "news_item")
}

type PhplistAdmin @db(name: "phplist_admin") {
  id: Int! @id
  created: DateTime
  disabled: Boolean @default(value: 0)
  email: String!
  loginname: String! @unique
  modified: DateTime! @default(value: "CURRENT_TIMESTAMP")
  modifiedby: String
  namelc: String
  password: String
  passwordchanged: DateTime
  superuser: Boolean @default(value: 0)
}

type PhplistAdminAttribute @db(name: "phplist_admin_attribute") {
  # Multiple ID fields (compound indexes) are not supported
  # adminid: Int! @id
  # Multiple ID fields (compound indexes) are not supported
  # adminattributeid: Int! @id
  value: String
}

type PhplistAdminTask @db(name: "phplist_admin_task") {
  # Multiple ID fields (compound indexes) are not supported
  # taskid: Int! @id
  # Multiple ID fields (compound indexes) are not supported
  # adminid: Int! @id
  level: Int
}

type PhplistAdminattribute @db(name: "phplist_adminattribute") {
  id: Int! @id
  defaultValue: String @db(name: "default_value")
  listorder: Int
  name: String!
  required: Boolean
  tablename: String
  type: String
}

type PhplistAttachment @db(name: "phplist_attachment") {
  id: Int! @id
  description: String
  filename: String
  mimetype: String
  remotefile: String
  size: Int
}

type PhplistBounce @db(name: "phplist_bounce") {
  id: Int! @id
  comment: String
  data: String
  date: DateTime
  header: String
  status: String
}

type PhplistBounceregex @db(name: "phplist_bounceregex") {
  id: Int! @id
  action: String
  admin: Int
  comment: String
  count: Int @default(value: 0)
  listorder: Int @default(value: 0)
  regex: String @unique
  status: String
}

# type PhplistBounceregexBounce @db(name: "phplist_bounceregex_bounce") {
  # Multiple ID fields (compound indexes) are not supported
  # regex: Int! @id
  # Multiple ID fields (compound indexes) are not supported
  # bounce: Int! @id
# }

type PhplistConfig @db(name: "phplist_config") {
  item: ID! @id
  editable: Boolean @default(value: 1)
  type: String
  value: String
}

type PhplistEventlog @db(name: "phplist_eventlog") {
  id: Int! @id
  entered: DateTime
  entry: String
  page: String
}

type PhplistLinktrack @db(name: "phplist_linktrack") {
  linkid: Int! @id
  clicked: Int @default(value: 0)
  firstclick: DateTime
  forward: String
  latestclick: DateTime! @default(value: "CURRENT_TIMESTAMP")
  messageid: Int!
  url: String
  userid: Int!
}

type PhplistLinktrackUserclick @db(name: "phplist_linktrack_userclick") {
  data: String
  date: DateTime
  linkid: Int!
  messageid: Int!
  name: String
  userid: Int!
}

type PhplistList @db(name: "phplist_list") {
  id: Int! @id
  active: Boolean
  description: String
  entered: DateTime
  listorder: Int
  modified: DateTime! @default(value: "CURRENT_TIMESTAMP")
  name: String!
  owner: Int
  prefix: String
  rssfeed: String
}

type PhplistListattrCbgroup @db(name: "phplist_listattr_cbgroup") {
  id: Int! @id
  listorder: Int @default(value: 0)
  name: String @unique
}

type PhplistListattrComment @db(name: "phplist_listattr_comments") {
  id: Int! @id
  listorder: Int @default(value: 0)
  name: String @unique
}

type PhplistListattrHiddenfiel @db(name: "phplist_listattr_hiddenfiel") {
  id: Int! @id
  listorder: Int @default(value: 0)
  name: String @unique
}

type PhplistListattrOthercomme @db(name: "phplist_listattr_othercomme") {
  id: Int! @id
  listorder: Int @default(value: 0)
  name: String @unique
}

type PhplistListmessage @db(name: "phplist_listmessage") {
  id: Int! @id
  entered: DateTime
  listid: Int!
  messageid: Int!
  modified: DateTime! @default(value: "CURRENT_TIMESTAMP")
}

type PhplistListrss @db(name: "phplist_listrss") {
  entered: DateTime!
  info: String
  listid: Int!
  type: String!
}

type PhplistListuser @db(name: "phplist_listuser") {
  # Multiple ID fields (compound indexes) are not supported
  # userid: Int! @id
  # Multiple ID fields (compound indexes) are not supported
  # listid: Int! @id
  entered: DateTime
  modified: DateTime! @default(value: "CURRENT_TIMESTAMP")
}

type PhplistMessage @db(name: "phplist_message") {
  id: Int! @id
  ashtml: Int @default(value: 0)
  aspdf: Int @default(value: 0)
  astext: Int @default(value: 0)
  astextandhtml: Int @default(value: 0)
  astextandpdf: Int @default(value: 0)
  bouncecount: Int @default(value: 0)
  embargo: DateTime
  entered: DateTime
  footer: String
  fromfield: String! @default(value: "")
  htmlformatted: Boolean @default(value: 0)
  message: String
  modified: DateTime! @default(value: "CURRENT_TIMESTAMP")
  owner: Int
  # Type mediumint(8) unsigned is not supported
  # processed: mediumint(8) unsigned @default(value: 0)
  repeatinterval: Int @default(value: 0)
  repeatuntil: DateTime
  replyto: String! @default(value: "")
  rsstemplate: String
  sendformat: String
  sendstart: DateTime
  sent: DateTime
  status: String
  subject: String! @default(value: "(no subject)")
  template: Int
  textmessage: String
  tofield: String! @default(value: "")
  userselection: String
  viewed: Int @default(value: 0)
}

type PhplistMessageAttachment @db(name: "phplist_message_attachment") {
  id: Int! @id
  attachmentid: Int!
  messageid: Int!
}

type PhplistMessagedatum @db(name: "phplist_messagedata") {
  # Multiple ID fields (compound indexes) are not supported
  # name: ID! @id
  # Multiple ID fields (compound indexes) are not supported
  # id: Int! @id
  data: String
}

type PhplistRssitem @db(name: "phplist_rssitem") {
  id: Int! @id
  added: DateTime
  ashtml: Int @default(value: 0)
  astext: Int @default(value: 0)
  link: String!
  list: Int!
  # Type mediumint(8) unsigned is not supported
  # processed: mediumint(8) unsigned @default(value: 0)
  source: String
  title: String!
}

type PhplistRssitemDatum @db(name: "phplist_rssitem_data") {
  # Multiple ID fields (compound indexes) are not supported
  # tag: ID! @id
  # Multiple ID fields (compound indexes) are not supported
  # itemid: Int! @id
  data: String
}

type PhplistRssitemUser @db(name: "phplist_rssitem_user") {
  # Multiple ID fields (compound indexes) are not supported
  # userid: Int! @id
  # Multiple ID fields (compound indexes) are not supported
  # itemid: Int! @id
  entered: DateTime! @default(value: "CURRENT_TIMESTAMP")
}

type PhplistSendprocess @db(name: "phplist_sendprocess") {
  id: Int! @id
  alive: Int @default(value: 1)
  ipaddress: String
  modified: DateTime! @default(value: "CURRENT_TIMESTAMP")
  page: String
  started: DateTime
}

type PhplistSubscribepage @db(name: "phplist_subscribepage") {
  id: Int! @id
  active: Boolean @default(value: 0)
  owner: Int
  title: String!
}

type PhplistSubscribepageDatum @db(name: "phplist_subscribepage_data") {
  # Multiple ID fields (compound indexes) are not supported
  # name: ID! @id
  # Multiple ID fields (compound indexes) are not supported
  # id: Int! @id
  data: String
}

type PhplistTask @db(name: "phplist_task") {
  id: Int! @id
  page: String! @unique
  type: String!
}

type PhplistTemplate @db(name: "phplist_template") {
  id: Int! @id
  listorder: Int
  # Type longblob is not supported
  # template: longblob
  title: String! @unique
}

type PhplistTemplateimage @db(name: "phplist_templateimage") {
  id: Int! @id
  # Type longblob is not supported
  # data: longblob
  filename: String
  height: Int
  mimetype: String
  template: Int! @default(value: 0)
  width: Int
}

type PhplistUrlcache @db(name: "phplist_urlcache") {
  id: Int! @id
  added: DateTime
  content: String
  lastmodified: Int
  url: String!
}

type PhplistUserAttribute @db(name: "phplist_user_attribute") {
  id: Int! @id
  defaultValue: String @db(name: "default_value")
  listorder: Int
  name: String!
  required: Boolean
  tablename: String
  type: String
}

type PhplistUserBlacklist @db(name: "phplist_user_blacklist") {
  email: ID! @id
  added: DateTime
}

type PhplistUserBlacklistDatum @db(name: "phplist_user_blacklist_data") {
  email: ID! @default(value: "") @id
  data: String
  name: String
}

type PhplistUserMessageBounce @db(name: "phplist_user_message_bounce") {
  id: Int! @id
  bounce: Int!
  message: Int!
  time: DateTime! @default(value: "CURRENT_TIMESTAMP")
  user: Int!
}

type PhplistUserMessageForward @db(name: "phplist_user_message_forward") {
  id: Int! @id
  forward: String
  message: Int!
  status: String
  time: DateTime! @default(value: "CURRENT_TIMESTAMP")
  user: Int!
}

type PhplistUserRss @db(name: "phplist_user_rss") {
  userid: Int! @id
  last: DateTime
}

type PhplistUserUser @db(name: "phplist_user_user") {
  id: Int! @id
  blacklisted: Boolean @default(value: 0)
  bouncecount: Int @default(value: 0)
  confirmed: Boolean @default(value: 0)
  disabled: Boolean @default(value: 0)
  email: String! @unique
  entered: DateTime
  extradata: String
  foreignkey: String
  htmlemail: Boolean @default(value: 0)
  modified: DateTime! @default(value: "CURRENT_TIMESTAMP")
  password: String
  passwordchanged: DateTime
  rssfrequency: String
  subscribepage: Int
  uniqid: String
}

type PhplistUserUserAttribute @db(name: "phplist_user_user_attribute") {
  # Multiple ID fields (compound indexes) are not supported
  # userid: Int! @id
  # Multiple ID fields (compound indexes) are not supported
  # attributeid: Int! @id
  value: String
}

type PhplistUserUserHistory @db(name: "phplist_user_user_history") {
  id: Int! @id
  date: DateTime
  detail: String
  ip: String
  summary: String
  systeminfo: String
  userid: Int!
}

type PhplistUsermessage @db(name: "phplist_usermessage") {
  # Multiple ID fields (compound indexes) are not supported
  # userid: Int! @id
  # Multiple ID fields (compound indexes) are not supported
  # messageid: Int! @id
  entered: DateTime!
  status: String
  viewed: DateTime
}

type PhplistUserstat @db(name: "phplist_userstats") {
  id: Int! @id
  item: String
  listid: Int @default(value: 0)
  unixdate: Int
  value: Int @default(value: 0)
}

type PunbbBan @db(name: "punbb_bans") {
  id: Int! @id
  email: String
  expire: Int
  ip: String
  message: String
  username: String
}

type PunbbCategory @db(name: "punbb_categories") {
  id: Int! @id
  catName: String! @db(name: "cat_name") @default(value: "New Category")
  dispPosition: Int! @db(name: "disp_position") @default(value: 0)
}

type PunbbCensoring @db(name: "punbb_censoring") {
  id: Int! @id
  replaceWith: String! @db(name: "replace_with") @default(value: "")
  searchFor: String! @db(name: "search_for") @default(value: "")
}

type PunbbConfig @db(name: "punbb_config") {
  conf_name: ID! @default(value: "") @id
  confValue: String @db(name: "conf_value")
}

type PunbbForum @db(name: "punbb_forums") {
  id: Int! @id
  catId: Int! @db(name: "cat_id") @default(value: 0)
  dispPosition: Int! @db(name: "disp_position") @default(value: 0)
  forumDesc: String @db(name: "forum_desc")
  forumName: String! @db(name: "forum_name") @default(value: "New forum")
  lastPost: Int @db(name: "last_post")
  lastPoster: String @db(name: "last_poster")
  lastPostId: Int @db(name: "last_post_id")
  moderators: String
  # Type mediumint(8) unsigned is not supported
  # numPosts: mediumint(8) unsigned! @db(name: "num_posts") @default(value: 0)
  # Type mediumint(8) unsigned is not supported
  # numTopics: mediumint(8) unsigned! @db(name: "num_topics") @default(value: 0)
  redirectUrl: String @db(name: "redirect_url")
  sortBy: Boolean! @db(name: "sort_by") @default(value: 0)
}

type PunbbForumPerm @db(name: "punbb_forum_perms") {
  # Multiple ID fields (compound indexes) are not supported
  # group_id: Int! @default(value: 0) @id
  # Multiple ID fields (compound indexes) are not supported
  # forum_id: Int! @default(value: 0) @id
  postPolls: Boolean! @db(name: "post_polls") @default(value: 1)
  postReplies: Boolean! @db(name: "post_replies") @default(value: 1)
  postTopics: Boolean! @db(name: "post_topics") @default(value: 1)
  readForum: Boolean! @db(name: "read_forum") @default(value: 1)
}

type PunbbGroup @db(name: "punbb_groups") {
  g_id: Int! @id
  gDeletePosts: Boolean! @db(name: "g_delete_posts") @default(value: 1)
  gDeleteTopics: Boolean! @db(name: "g_delete_topics") @default(value: 1)
  gEditPosts: Boolean! @db(name: "g_edit_posts") @default(value: 1)
  gEditSubjectsInterval: Int! @db(name: "g_edit_subjects_interval") @default(value: 300)
  gPostFlood: Int! @db(name: "g_post_flood") @default(value: 30)
  gPostPolls: Boolean! @db(name: "g_post_polls") @default(value: 1)
  gPostReplies: Boolean! @db(name: "g_post_replies") @default(value: 1)
  gPostTopics: Boolean! @db(name: "g_post_topics") @default(value: 1)
  gReadBoard: Boolean! @db(name: "g_read_board") @default(value: 1)
  gSearch: Boolean! @db(name: "g_search") @default(value: 1)
  gSearchFlood: Int! @db(name: "g_search_flood") @default(value: 30)
  gSearchUsers: Boolean! @db(name: "g_search_users") @default(value: 1)
  gSetTitle: Boolean! @db(name: "g_set_title") @default(value: 1)
  gTitle: String! @db(name: "g_title") @default(value: "")
  gUserTitle: String @db(name: "g_user_title")
}

type PunbbOnline @db(name: "punbb_online") {
  ident: String! @default(value: "")
  idle: Boolean! @default(value: 0)
  logged: Int! @default(value: 0)
  userId: Int! @db(name: "user_id") @default(value: 1)
}

type PunbbPoll @db(name: "punbb_polls") {
  id: Int! @id
  options: String!
  pollid: Int! @default(value: 0)
  ptype: Boolean! @default(value: 0)
  voters: String!
  votes: String!
}

type PunbbPost @db(name: "punbb_posts") {
  id: Int! @id
  edited: Int
  editedBy: String @db(name: "edited_by")
  hideSmilies: Boolean! @db(name: "hide_smilies") @default(value: 0)
  message: String!
  posted: Int! @default(value: 0)
  poster: String! @default(value: "")
  posterEmail: String @db(name: "poster_email")
  posterId: Int! @db(name: "poster_id") @default(value: 1)
  posterIp: String @db(name: "poster_ip")
  topicId: Int! @db(name: "topic_id") @default(value: 0)
}

type PunbbRank @db(name: "punbb_ranks") {
  id: Int! @id
  # Type mediumint(8) unsigned is not supported
  # minPosts: mediumint(8) unsigned! @db(name: "min_posts") @default(value: 0)
  rank: String! @default(value: "")
}

type PunbbReport @db(name: "punbb_reports") {
  id: Int! @id
  created: Int! @default(value: 0)
  forumId: Int! @db(name: "forum_id") @default(value: 0)
  message: String!
  postId: Int! @db(name: "post_id") @default(value: 0)
  reportedBy: Int! @db(name: "reported_by") @default(value: 0)
  topicId: Int! @db(name: "topic_id") @default(value: 0)
  zapped: Int
  zappedBy: Int @db(name: "zapped_by")
}

type PunbbSearchCache @db(name: "punbb_search_cache") {
  id: Int! @default(value: 0) @id
  ident: String! @default(value: "")
  searchData: String! @db(name: "search_data")
}

type PunbbSearchMatch @db(name: "punbb_search_matches") {
  postId: Int! @db(name: "post_id") @default(value: 0)
  subjectMatch: Boolean! @db(name: "subject_match") @default(value: 0)
  # Type mediumint(8) unsigned is not supported
  # wordId: mediumint(8) unsigned! @db(name: "word_id") @default(value: 0)
}

type PunbbSearchWord @db(name: "punbb_search_words") {
  word: ID! @default(value: "") @id
  # Type mediumint(8) unsigned is not supported
  # id: mediumint(8) unsigned!
}

# type PunbbSubscription @db(name: "punbb_subscriptions") {
  # Multiple ID fields (compound indexes) are not supported
  # user_id: Int! @default(value: 0) @id
  # Multiple ID fields (compound indexes) are not supported
  # topic_id: Int! @default(value: 0) @id
# }

type PunbbTopic @db(name: "punbb_topics") {
  id: Int! @id
  closed: Boolean! @default(value: 0)
  forumId: Int! @db(name: "forum_id") @default(value: 0)
  lastPost: Int! @db(name: "last_post") @default(value: 0)
  lastPoster: String @db(name: "last_poster")
  lastPostId: Int! @db(name: "last_post_id") @default(value: 0)
  movedTo: Int @db(name: "moved_to")
  no: String!
  # Type mediumint(8) unsigned is not supported
  # numReplies: mediumint(8) unsigned! @db(name: "num_replies") @default(value: 0)
  # Type mediumint(8) unsigned is not supported
  # numViews: mediumint(8) unsigned! @db(name: "num_views") @default(value: 0)
  posted: Int! @default(value: 0)
  poster: String! @default(value: "")
  question: String!
  sticky: Boolean! @default(value: 0)
  subject: String! @default(value: "")
  yes: String!
}

type PunbbUploaded @db(name: "punbb_uploaded") {
  id: Int! @id
  data: Int!
  descr: String!
  downs: Int!
  file: String!
  size: Int!
  uid: Int!
  user: String!
  userStat: String! @db(name: "user_stat")
}

type PunbbUploadsConf @db(name: "punbb_uploads_conf") {
  gId: Int! @db(name: "g_id") @default(value: 0)
  pDelete: Boolean! @db(name: "p_delete") @default(value: 0)
  pGlobaldelete: Boolean! @db(name: "p_globaldelete") @default(value: 0)
  pGlobalview: Boolean! @db(name: "p_globalview") @default(value: 0)
  pSetop: Boolean! @db(name: "p_setop") @default(value: 0)
  pUpload: Boolean! @db(name: "p_upload") @default(value: 0)
  pView: Boolean! @db(name: "p_view") @default(value: 0)
  uFsize: Int! @db(name: "u_fsize") @default(value: 0)
}

type PunbbUploadsType @db(name: "punbb_uploads_types") {
  id: Int! @id
  exts: String!
  type: String!
}

type PunbbUser @db(name: "punbb_users") {
  id: Int! @id
  activateKey: String @db(name: "activate_key")
  activateString: String @db(name: "activate_string")
  adminNote: String @db(name: "admin_note")
  aim: String
  dispPosts: Boolean @db(name: "disp_posts")
  dispTopics: Boolean @db(name: "disp_topics")
  email: String! @default(value: "")
  emailSetting: Boolean! @db(name: "email_setting") @default(value: 1)
  groupId: Int! @db(name: "group_id") @default(value: 4)
  icq: String
  jabber: String
  language: String! @default(value: "English")
  lastPost: Int @db(name: "last_post")
  lastVisit: Int! @db(name: "last_visit") @default(value: 0)
  location: String
  msn: String
  notifyWithPost: Boolean! @db(name: "notify_with_post") @default(value: 0)
  numPosts: Int! @db(name: "num_posts") @default(value: 0)
  password: String! @default(value: "")
  readTopics: String @db(name: "read_topics")
  realname: String
  registered: Int! @default(value: 0)
  registrationIp: String! @db(name: "registration_ip") @default(value: "0.0.0.0")
  savePass: Boolean! @db(name: "save_pass") @default(value: 1)
  showAvatars: Boolean! @db(name: "show_avatars") @default(value: 1)
  showImg: Boolean! @db(name: "show_img") @default(value: 1)
  showImgSig: Boolean! @db(name: "show_img_sig") @default(value: 1)
  showSig: Boolean! @db(name: "show_sig") @default(value: 1)
  showSmilies: Boolean! @db(name: "show_smilies") @default(value: 1)
  signature: String
  style: String! @default(value: "Oxygen")
  timezone: Float! @default(value: 0)
  title: String
  url: String
  useAvatar: Boolean! @db(name: "use_avatar") @default(value: 0)
  username: String! @default(value: "")
  yahoo: String
}

type PunbbUserthread @db(name: "punbb_userthread") {
  # Multiple ID fields (compound indexes) are not supported
  # user: Int! @default(value: 0) @id
  # Multiple ID fields (compound indexes) are not supported
  # thread: Int! @default(value: 0) @id
  # Multiple ID fields (compound indexes) are not supported
  # forum: Int! @default(value: 0) @id
  lastRead: Int @db(name: "last_read")
  posted: Boolean! @default(value: 0)
}

type TBlog @db(name: "t_blogs") {
  id: Int! @id
  blog: String!
  posted: DateTime! @default(value: "0000-00-00 00:00:00")
  title: String! @default(value: "")
  username: String! @default(value: "")
}

type TGig @db(name: "t_gigs") {
  id: Int! @id
  flyerlink: String! @default(value: "")
  gigdate: DateTime! @default(value: "0000-00-00 00:00:00")
  giglink: String! @default(value: "")
  gigplace: String! @default(value: "")
  gigtext: String!
  maplink: String! @default(value: "")
  posted: DateTime! @default(value: "0000-00-00 00:00:00")
  ticketlink: String! @default(value: "")
  username: String! @default(value: "")
}

type TNew @db(name: "t_news") {
  id: Int! @id
  news: String!
  posted: DateTime! @default(value: "0000-00-00 00:00:00")
  username: String! @default(value: "")
}

type TUser @db(name: "t_users") {
  username: ID! @default(value: "") @id
  email: String! @default(value: "")
  lastlogin: DateTime! @default(value: "0000-00-00 00:00:00")
  password: String! @default(value: "")
  userid: String! @default(value: "")
}

type WikipeteArchive @db(name: "wikipete_archive") {
  # Type tinyblob is not supported
  # arComment: tinyblob! @db(name: "ar_comment")
  arDeleted: Boolean! @db(name: "ar_deleted") @default(value: 0)
  # Type tinyblob is not supported
  # arFlags: tinyblob! @db(name: "ar_flags")
  arLen: Int @db(name: "ar_len")
  arMinorEdit: Boolean! @db(name: "ar_minor_edit") @default(value: 0)
  arNamespace: Int! @db(name: "ar_namespace") @default(value: 0)
  arPageId: Int @db(name: "ar_page_id")
  arParentId: Int @db(name: "ar_parent_id")
  arRevId: Int @db(name: "ar_rev_id")
  arText: String! @db(name: "ar_text")
  arTextId: Int @db(name: "ar_text_id")
  # Type binary(14) is not supported
  # arTimestamp: binary(14)! @db(name: "ar_timestamp") @default(value:               )
  # Type varbinary(255) is not supported
  # arTitle: varbinary(255)! @db(name: "ar_title") @default(value: )
  arUser: Int! @db(name: "ar_user") @default(value: 0)
  # Type varbinary(255) is not supported
  # arUserText: varbinary(255)! @db(name: "ar_user_text")
}

type WikipeteCategory @db(name: "wikipete_category") {
  cat_id: Int! @id
  catFiles: Int! @db(name: "cat_files") @default(value: 0)
  catHidden: Boolean! @db(name: "cat_hidden") @default(value: 0)
  catPages: Int! @db(name: "cat_pages") @default(value: 0)
  catSubcats: Int! @db(name: "cat_subcats") @default(value: 0)
  # Type varbinary(255) is not supported
  # catTitle: varbinary(255)! @db(name: "cat_title") @unique
}

type WikipeteCategorylink @db(name: "wikipete_categorylinks") {
  clFrom: Int! @db(name: "cl_from") @default(value: 0)
  # Type varbinary(70) is not supported
  # clSortkey: varbinary(70)! @db(name: "cl_sortkey") @default(value: )
  clTimestamp: DateTime! @db(name: "cl_timestamp") @default(value: "CURRENT_TIMESTAMP")
  # Type varbinary(255) is not supported
  # clTo: varbinary(255)! @db(name: "cl_to") @default(value: )
}

type WikipeteChangeTag @db(name: "wikipete_change_tag") {
  ctLogId: Int @db(name: "ct_log_id")
  ctParams: String @db(name: "ct_params")
  ctRcId: Int @db(name: "ct_rc_id")
  ctRevId: Int @db(name: "ct_rev_id")
  # Type varbinary(255) is not supported
  # ctTag: varbinary(255)! @db(name: "ct_tag")
}

type WikipeteExternallink @db(name: "wikipete_externallinks") {
  elFrom: Int! @db(name: "el_from") @default(value: 0)
  elIndex: String! @db(name: "el_index")
  elTo: String! @db(name: "el_to")
}

type WikipeteFilearchive @db(name: "wikipete_filearchive") {
  fa_id: Int! @id
  # Type varbinary(255) is not supported
  # faArchiveName: varbinary(255) @db(name: "fa_archive_name") @default(value: )
  faBits: Int @db(name: "fa_bits") @default(value: 0)
  faDeleted: Boolean! @db(name: "fa_deleted") @default(value: 0)
  faDeletedReason: String @db(name: "fa_deleted_reason")
  # Type binary(14) is not supported
  # faDeletedTimestamp: binary(14) @db(name: "fa_deleted_timestamp") @default(value:               )
  faDeletedUser: Int @db(name: "fa_deleted_user")
  # Type tinyblob is not supported
  # faDescription: tinyblob @db(name: "fa_description")
  faHeight: Int @db(name: "fa_height") @default(value: 0)
  faMajorMime: WikipeteFilearchiveFaMajorMimeEnum @db(name: "fa_major_mime") @default(value: unknown)
  faMediaType: WikipeteFilearchiveFaMediaTypeEnum @db(name: "fa_media_type")
  faMetadata: String @db(name: "fa_metadata")
  # Type varbinary(32) is not supported
  # faMinorMime: varbinary(32) @db(name: "fa_minor_mime") @default(value: unknown)
  # Type varbinary(255) is not supported
  # faName: varbinary(255)! @db(name: "fa_name") @default(value: )
  faSize: Int @db(name: "fa_size") @default(value: 0)
  # Type varbinary(16) is not supported
  # faStorageGroup: varbinary(16) @db(name: "fa_storage_group")
  # Type varbinary(64) is not supported
  # faStorageKey: varbinary(64) @db(name: "fa_storage_key") @default(value: )
  # Type binary(14) is not supported
  # faTimestamp: binary(14) @db(name: "fa_timestamp") @default(value:               )
  faUser: Int @db(name: "fa_user") @default(value: 0)
  # Type varbinary(255) is not supported
  # faUserText: varbinary(255) @db(name: "fa_user_text")
  faWidth: Int @db(name: "fa_width") @default(value: 0)
}

enum WikipeteFilearchiveFaMajorMimeEnum {
  application
  audio
  image
  message
  model
  multipart
  text
  unknown
  video
}

enum WikipeteFilearchiveFaMediaTypeEnum {
  ARCHIVE
  AUDIO
  BITMAP
  DRAWING
  EXECUTABLE
  MULTIMEDIA
  OFFICE
  TEXT
  UNKNOWN
  VIDEO
}

type WikipeteHitcounter @db(name: "wikipete_hitcounter") {
  hcId: Int! @db(name: "hc_id")
}

type WikipeteImage @db(name: "wikipete_image") {
  # Type varbinary(255) is not supported
  # img_name: varbinary(255)! @default(value: ) @id
  imgBits: Int! @db(name: "img_bits") @default(value: 0)
  # Type tinyblob is not supported
  # imgDescription: tinyblob! @db(name: "img_description")
  imgHeight: Int! @db(name: "img_height") @default(value: 0)
  imgMajorMime: WikipeteImageImgMajorMimeEnum! @db(name: "img_major_mime") @default(value: unknown)
  imgMediaType: WikipeteImageImgMediaTypeEnum @db(name: "img_media_type")
  imgMetadata: String! @db(name: "img_metadata")
  # Type varbinary(32) is not supported
  # imgMinorMime: varbinary(32)! @db(name: "img_minor_mime") @default(value: unknown)
  # Type varbinary(32) is not supported
  # imgSha1: varbinary(32)! @db(name: "img_sha1") @default(value: )
  imgSize: Int! @db(name: "img_size") @default(value: 0)
  # Type varbinary(14) is not supported
  # imgTimestamp: varbinary(14)! @db(name: "img_timestamp") @default(value: )
  imgUser: Int! @db(name: "img_user") @default(value: 0)
  # Type varbinary(255) is not supported
  # imgUserText: varbinary(255)! @db(name: "img_user_text")
  imgWidth: Int! @db(name: "img_width") @default(value: 0)
}

enum WikipeteImageImgMajorMimeEnum {
  application
  audio
  image
  message
  model
  multipart
  text
  unknown
  video
}

enum WikipeteImageImgMediaTypeEnum {
  ARCHIVE
  AUDIO
  BITMAP
  DRAWING
  EXECUTABLE
  MULTIMEDIA
  OFFICE
  TEXT
  UNKNOWN
  VIDEO
}

type WikipeteImagelink @db(name: "wikipete_imagelinks") {
  ilFrom: Int! @db(name: "il_from") @default(value: 0)
  # Type varbinary(255) is not supported
  # ilTo: varbinary(255)! @db(name: "il_to") @default(value: )
}

type WikipeteInterwiki @db(name: "wikipete_interwiki") {
  # Type varbinary(32) is not supported
  # iw_prefix: varbinary(32)! @id
  iwLocal: Boolean! @db(name: "iw_local")
  iwTrans: Boolean! @db(name: "iw_trans") @default(value: 0)
  iwUrl: String! @db(name: "iw_url")
}

type WikipeteIpblock @db(name: "wikipete_ipblocks") {
  ipb_id: Int! @id
  # Type tinyblob is not supported
  # ipbAddress: tinyblob! @db(name: "ipb_address")
  ipbAllowUsertalk: Boolean! @db(name: "ipb_allow_usertalk") @default(value: 0)
  ipbAnonOnly: Boolean! @db(name: "ipb_anon_only") @default(value: 0)
  ipbAuto: Boolean! @db(name: "ipb_auto") @default(value: 0)
  ipbBlockEmail: Boolean! @db(name: "ipb_block_email") @default(value: 0)
  ipbBy: Int! @db(name: "ipb_by") @default(value: 0)
  # Type varbinary(255) is not supported
  # ipbByText: varbinary(255)! @db(name: "ipb_by_text") @default(value: )
  ipbCreateAccount: Boolean! @db(name: "ipb_create_account") @default(value: 1)
  ipbDeleted: Boolean! @db(name: "ipb_deleted") @default(value: 0)
  ipbEnableAutoblock: Boolean! @db(name: "ipb_enable_autoblock") @default(value: 1)
  # Type varbinary(14) is not supported
  # ipbExpiry: varbinary(14)! @db(name: "ipb_expiry") @default(value: )
  # Type tinyblob is not supported
  # ipbRangeEnd: tinyblob! @db(name: "ipb_range_end")
  # Type tinyblob is not supported
  # ipbRangeStart: tinyblob! @db(name: "ipb_range_start")
  # Type tinyblob is not supported
  # ipbReason: tinyblob! @db(name: "ipb_reason")
  # Type binary(14) is not supported
  # ipbTimestamp: binary(14)! @db(name: "ipb_timestamp") @default(value:               )
  ipbUser: Int! @db(name: "ipb_user") @default(value: 0)
}

type WikipeteJob @db(name: "wikipete_job") {
  job_id: Int! @id
  # Type varbinary(60) is not supported
  # jobCmd: varbinary(60)! @db(name: "job_cmd") @default(value: )
  jobNamespace: Int! @db(name: "job_namespace")
  jobParams: String! @db(name: "job_params")
  # Type varbinary(255) is not supported
  # jobTitle: varbinary(255)! @db(name: "job_title")
}

type WikipeteLanglink @db(name: "wikipete_langlinks") {
  llFrom: Int! @db(name: "ll_from") @default(value: 0)
  # Type varbinary(20) is not supported
  # llLang: varbinary(20)! @db(name: "ll_lang") @default(value: )
  # Type varbinary(255) is not supported
  # llTitle: varbinary(255)! @db(name: "ll_title") @default(value: )
}

type WikipeteLogging @db(name: "wikipete_logging") {
  log_id: Int! @id
  # Type varbinary(10) is not supported
  # logAction: varbinary(10)! @db(name: "log_action") @default(value: )
  # Type varbinary(255) is not supported
  # logComment: varbinary(255)! @db(name: "log_comment") @default(value: )
  logDeleted: Boolean! @db(name: "log_deleted") @default(value: 0)
  logNamespace: Int! @db(name: "log_namespace") @default(value: 0)
  logParams: String! @db(name: "log_params")
  # Type binary(14) is not supported
  # logTimestamp: binary(14)! @db(name: "log_timestamp") @default(value: 19700101000000)
  # Type varbinary(255) is not supported
  # logTitle: varbinary(255)! @db(name: "log_title") @default(value: )
  # Type varbinary(10) is not supported
  # logType: varbinary(10)! @db(name: "log_type") @default(value: )
  logUser: Int! @db(name: "log_user") @default(value: 0)
}

type WikipeteMath @db(name: "wikipete_math") {
  # Type varbinary(16) is not supported
  # math_inputhash: varbinary(16)! @id
  mathHtml: String @db(name: "math_html")
  mathHtmlConservativeness: Boolean! @db(name: "math_html_conservativeness")
  mathMathml: String @db(name: "math_mathml")
  # Type varbinary(16) is not supported
  # mathOutputhash: varbinary(16)! @db(name: "math_outputhash")
}

type WikipeteObjectcache @db(name: "wikipete_objectcache") {
  # Type varbinary(255) is not supported
  # keyname: varbinary(255)! @default(value: ) @id
  exptime: DateTime
  value: String
}

type WikipeteOldimage @db(name: "wikipete_oldimage") {
  # Type varbinary(255) is not supported
  # oiArchiveName: varbinary(255)! @db(name: "oi_archive_name") @default(value: )
  oiBits: Int! @db(name: "oi_bits") @default(value: 0)
  oiDeleted: Boolean! @db(name: "oi_deleted") @default(value: 0)
  # Type tinyblob is not supported
  # oiDescription: tinyblob! @db(name: "oi_description")
  oiHeight: Int! @db(name: "oi_height") @default(value: 0)
  oiMajorMime: WikipeteOldimageOiMajorMimeEnum! @db(name: "oi_major_mime") @default(value: unknown)
  oiMediaType: WikipeteOldimageOiMediaTypeEnum @db(name: "oi_media_type")
  oiMetadata: String! @db(name: "oi_metadata")
  # Type varbinary(32) is not supported
  # oiMinorMime: varbinary(32)! @db(name: "oi_minor_mime") @default(value: unknown)
  # Type varbinary(255) is not supported
  # oiName: varbinary(255)! @db(name: "oi_name") @default(value: )
  # Type varbinary(32) is not supported
  # oiSha1: varbinary(32)! @db(name: "oi_sha1") @default(value: )
  oiSize: Int! @db(name: "oi_size") @default(value: 0)
  # Type binary(14) is not supported
  # oiTimestamp: binary(14)! @db(name: "oi_timestamp") @default(value:               )
  oiUser: Int! @db(name: "oi_user") @default(value: 0)
  # Type varbinary(255) is not supported
  # oiUserText: varbinary(255)! @db(name: "oi_user_text")
  oiWidth: Int! @db(name: "oi_width") @default(value: 0)
}

enum WikipeteOldimageOiMajorMimeEnum {
  application
  audio
  image
  message
  model
  multipart
  text
  unknown
  video
}

enum WikipeteOldimageOiMediaTypeEnum {
  ARCHIVE
  AUDIO
  BITMAP
  DRAWING
  EXECUTABLE
  MULTIMEDIA
  OFFICE
  TEXT
  UNKNOWN
  VIDEO
}

type WikipetePage @db(name: "wikipete_page") {
  page_id: Int! @id
  pageCounter: Int! @db(name: "page_counter") @default(value: 0)
  pageIsNew: Boolean! @db(name: "page_is_new") @default(value: 0)
  pageIsRedirect: Boolean! @db(name: "page_is_redirect") @default(value: 0)
  pageLatest: Int! @db(name: "page_latest")
  pageLen: Int! @db(name: "page_len")
  pageNamespace: Int! @db(name: "page_namespace")
  # Type double unsigned is not supported
  # pageRandom: double unsigned! @db(name: "page_random")
  # Type tinyblob is not supported
  # pageRestrictions: tinyblob! @db(name: "page_restrictions")
  # Type varbinary(255) is not supported
  # pageTitle: varbinary(255)! @db(name: "page_title")
  # Type binary(14) is not supported
  # pageTouched: binary(14)! @db(name: "page_touched") @default(value:               )
}

type WikipetePageProp @db(name: "wikipete_page_props") {
  ppPage: Int! @db(name: "pp_page")
  # Type varbinary(60) is not supported
  # ppPropname: varbinary(60)! @db(name: "pp_propname")
  ppValue: String! @db(name: "pp_value")
}

type WikipetePageRestriction @db(name: "wikipete_page_restrictions") {
  pr_id: Int! @id
  prCascade: Boolean! @db(name: "pr_cascade")
  # Type varbinary(14) is not supported
  # prExpiry: varbinary(14) @db(name: "pr_expiry")
  # Type varbinary(60) is not supported
  # prLevel: varbinary(60)! @db(name: "pr_level")
  prPage: Int! @db(name: "pr_page")
  # Type varbinary(60) is not supported
  # prType: varbinary(60)! @db(name: "pr_type")
  prUser: Int @db(name: "pr_user")
}

type WikipetePagelink @db(name: "wikipete_pagelinks") {
  plFrom: Int! @db(name: "pl_from") @default(value: 0)
  plNamespace: Int! @db(name: "pl_namespace") @default(value: 0)
  # Type varbinary(255) is not supported
  # plTitle: varbinary(255)! @db(name: "pl_title") @default(value: )
}

type WikipeteProtectedTitle @db(name: "wikipete_protected_titles") {
  # Type varbinary(60) is not supported
  # ptCreatePerm: varbinary(60)! @db(name: "pt_create_perm")
  # Type varbinary(14) is not supported
  # ptExpiry: varbinary(14)! @db(name: "pt_expiry") @default(value: )
  ptNamespace: Int! @db(name: "pt_namespace")
  # Type tinyblob is not supported
  # ptReason: tinyblob @db(name: "pt_reason")
  # Type binary(14) is not supported
  # ptTimestamp: binary(14)! @db(name: "pt_timestamp")
  # Type varbinary(255) is not supported
  # ptTitle: varbinary(255)! @db(name: "pt_title")
  ptUser: Int! @db(name: "pt_user")
}

type WikipeteQuerycache @db(name: "wikipete_querycache") {
  qcNamespace: Int! @db(name: "qc_namespace") @default(value: 0)
  # Type varbinary(255) is not supported
  # qcTitle: varbinary(255)! @db(name: "qc_title") @default(value: )
  # Type varbinary(32) is not supported
  # qcType: varbinary(32)! @db(name: "qc_type")
  qcValue: Int! @db(name: "qc_value") @default(value: 0)
}

# type WikipeteQuerycacheInfo @db(name: "wikipete_querycache_info") {
  # Type varbinary(32) is not supported
  # qci_type: varbinary(32)! @default(value: ) @id
  # Type binary(14) is not supported
  # qciTimestamp: binary(14)! @db(name: "qci_timestamp") @default(value: 19700101000000)
# }

type WikipeteQuerycachetwo @db(name: "wikipete_querycachetwo") {
  qccNamespace: Int! @db(name: "qcc_namespace") @default(value: 0)
  qccNamespacetwo: Int! @db(name: "qcc_namespacetwo") @default(value: 0)
  # Type varbinary(255) is not supported
  # qccTitle: varbinary(255)! @db(name: "qcc_title") @default(value: )
  # Type varbinary(255) is not supported
  # qccTitletwo: varbinary(255)! @db(name: "qcc_titletwo") @default(value: )
  # Type varbinary(32) is not supported
  # qccType: varbinary(32)! @db(name: "qcc_type")
  qccValue: Int! @db(name: "qcc_value") @default(value: 0)
}

type WikipeteRecentchange @db(name: "wikipete_recentchanges") {
  rc_id: Int! @id
  rcBot: Boolean! @db(name: "rc_bot") @default(value: 0)
  # Type varbinary(255) is not supported
  # rcComment: varbinary(255)! @db(name: "rc_comment") @default(value: )
  rcCurId: Int! @db(name: "rc_cur_id") @default(value: 0)
  # Type varbinary(14) is not supported
  # rcCurTime: varbinary(14)! @db(name: "rc_cur_time") @default(value: )
  rcDeleted: Boolean! @db(name: "rc_deleted") @default(value: 0)
  # Type varbinary(40) is not supported
  # rcIp: varbinary(40)! @db(name: "rc_ip") @default(value: )
  rcLastOldid: Int! @db(name: "rc_last_oldid") @default(value: 0)
  # Type varbinary(255) is not supported
  # rcLogAction: varbinary(255) @db(name: "rc_log_action")
  rcLogid: Int! @db(name: "rc_logid") @default(value: 0)
  # Type varbinary(255) is not supported
  # rcLogType: varbinary(255) @db(name: "rc_log_type")
  rcMinor: Boolean! @db(name: "rc_minor") @default(value: 0)
  rcMovedToNs: Boolean! @db(name: "rc_moved_to_ns") @default(value: 0)
  # Type varbinary(255) is not supported
  # rcMovedToTitle: varbinary(255)! @db(name: "rc_moved_to_title") @default(value: )
  rcNamespace: Int! @db(name: "rc_namespace") @default(value: 0)
  rcNew: Boolean! @db(name: "rc_new") @default(value: 0)
  rcNewLen: Int @db(name: "rc_new_len")
  rcOldLen: Int @db(name: "rc_old_len")
  rcParams: String @db(name: "rc_params")
  rcPatrolled: Boolean! @db(name: "rc_patrolled") @default(value: 0)
  rcThisOldid: Int! @db(name: "rc_this_oldid") @default(value: 0)
  # Type varbinary(14) is not supported
  # rcTimestamp: varbinary(14)! @db(name: "rc_timestamp") @default(value: )
  # Type varbinary(255) is not supported
  # rcTitle: varbinary(255)! @db(name: "rc_title") @default(value: )
  rcType: Boolean! @db(name: "rc_type") @default(value: 0)
  rcUser: Int! @db(name: "rc_user") @default(value: 0)
  # Type varbinary(255) is not supported
  # rcUserText: varbinary(255)! @db(name: "rc_user_text")
}

type WikipeteRedirect @db(name: "wikipete_redirect") {
  rd_from: Int! @default(value: 0) @id
  rdNamespace: Int! @db(name: "rd_namespace") @default(value: 0)
  # Type varbinary(255) is not supported
  # rdTitle: varbinary(255)! @db(name: "rd_title") @default(value: )
}

type WikipeteRevision @db(name: "wikipete_revision") {
  rev_id: Int! @id
  # Type tinyblob is not supported
  # revComment: tinyblob! @db(name: "rev_comment")
  revDeleted: Boolean! @db(name: "rev_deleted") @default(value: 0)
  revLen: Int @db(name: "rev_len")
  revMinorEdit: Boolean! @db(name: "rev_minor_edit") @default(value: 0)
  revPage: Int! @db(name: "rev_page")
  revParentId: Int @db(name: "rev_parent_id")
  revTextId: Int! @db(name: "rev_text_id")
  # Type binary(14) is not supported
  # revTimestamp: binary(14)! @db(name: "rev_timestamp") @default(value:               )
  revUser: Int! @db(name: "rev_user") @default(value: 0)
  # Type varbinary(255) is not supported
  # revUserText: varbinary(255)! @db(name: "rev_user_text") @default(value: )
}

type WikipeteSearchindex @db(name: "wikipete_searchindex") {
  si_page: Int! @id
  siText: String! @db(name: "si_text")
  siTitle: String! @db(name: "si_title") @default(value: "")
}

type WikipeteSiteStat @db(name: "wikipete_site_stats") {
  ss_row_id: Int! @id
  ssActiveUsers: Int @db(name: "ss_active_users") @default(value: -1)
  ssAdmins: Int @db(name: "ss_admins") @default(value: -1)
  ssGoodArticles: Int @db(name: "ss_good_articles") @default(value: 0)
  ssImages: Int @db(name: "ss_images") @default(value: 0)
  ssTotalEdits: Int @db(name: "ss_total_edits") @default(value: 0)
  ssTotalPages: Int @db(name: "ss_total_pages") @default(value: -1)
  ssTotalViews: Int @db(name: "ss_total_views") @default(value: 0)
  ssUsers: Int @db(name: "ss_users") @default(value: -1)
}

type WikipeteTagSummary @db(name: "wikipete_tag_summary") {
  tsLogId: Int @db(name: "ts_log_id") @unique
  tsRcId: Int @db(name: "ts_rc_id") @unique
  tsRevId: Int @db(name: "ts_rev_id") @unique
  tsTags: String! @db(name: "ts_tags")
}

type WikipeteTemplatelink @db(name: "wikipete_templatelinks") {
  tlFrom: Int! @db(name: "tl_from") @default(value: 0)
  tlNamespace: Int! @db(name: "tl_namespace") @default(value: 0)
  # Type varbinary(255) is not supported
  # tlTitle: varbinary(255)! @db(name: "tl_title") @default(value: )
}

type WikipeteText @db(name: "wikipete_text") {
  old_id: Int! @id
  # Type tinyblob is not supported
  # oldFlags: tinyblob! @db(name: "old_flags")
  oldText: String! @db(name: "old_text")
}

type WikipeteTrackback @db(name: "wikipete_trackbacks") {
  tb_id: Int! @id
  tbEx: String @db(name: "tb_ex")
  # Type varbinary(255) is not supported
  # tbName: varbinary(255) @db(name: "tb_name")
  tbPage: Int @db(name: "tb_page")
  # Type varbinary(255) is not supported
  # tbTitle: varbinary(255)! @db(name: "tb_title")
  tbUrl: String! @db(name: "tb_url")
}

type WikipeteTranscache @db(name: "wikipete_transcache") {
  # Type varbinary(255) is not supported
  # tc_url: varbinary(255)! @id
  tcContents: String @db(name: "tc_contents")
  tcTime: Int! @db(name: "tc_time")
}

# type WikipeteUpdatelog @db(name: "wikipete_updatelog") {
  # Type varbinary(255) is not supported
  # ul_key: varbinary(255)! @id
# }

type WikipeteUser @db(name: "wikipete_user") {
  user_id: Int! @id
  userEditcount: Int @db(name: "user_editcount")
  # Type tinyblob is not supported
  # userEmail: tinyblob! @db(name: "user_email")
  # Type binary(14) is not supported
  # userEmailAuthenticated: binary(14) @db(name: "user_email_authenticated")
  # Type binary(32) is not supported
  # userEmailToken: binary(32) @db(name: "user_email_token")
  # Type binary(14) is not supported
  # userEmailTokenExpires: binary(14) @db(name: "user_email_token_expires")
  # Type varbinary(255) is not supported
  # userName: varbinary(255)! @db(name: "user_name") @default(value: ) @unique
  # Type binary(14) is not supported
  # userNewpassTime: binary(14) @db(name: "user_newpass_time")
  # Type tinyblob is not supported
  # userNewpassword: tinyblob! @db(name: "user_newpassword")
  userOptions: String! @db(name: "user_options")
  # Type tinyblob is not supported
  # userPassword: tinyblob! @db(name: "user_password")
  # Type varbinary(255) is not supported
  # userRealName: varbinary(255)! @db(name: "user_real_name") @default(value: )
  # Type binary(14) is not supported
  # userRegistration: binary(14) @db(name: "user_registration")
  # Type binary(32) is not supported
  # userToken: binary(32)! @db(name: "user_token") @default(value:                                 )
  # Type binary(14) is not supported
  # userTouched: binary(14)! @db(name: "user_touched") @default(value:               )
}

type WikipeteUserGroup @db(name: "wikipete_user_groups") {
  # Type varbinary(16) is not supported
  # ugGroup: varbinary(16)! @db(name: "ug_group") @default(value: )
  ugUser: Int! @db(name: "ug_user") @default(value: 0)
}

type WikipeteUserNewtalk @db(name: "wikipete_user_newtalk") {
  userId: Int! @db(name: "user_id") @default(value: 0)
  # Type varbinary(40) is not supported
  # userIp: varbinary(40)! @db(name: "user_ip") @default(value: )
  # Type binary(14) is not supported
  # userLastTimestamp: binary(14)! @db(name: "user_last_timestamp") @default(value:               )
}

# type WikipeteValidTag @db(name: "wikipete_valid_tag") {
  # Type varbinary(255) is not supported
  # vt_tag: varbinary(255)! @id
# }

type WikipeteWatchlist @db(name: "wikipete_watchlist") {
  wlNamespace: Int! @db(name: "wl_namespace") @default(value: 0)
  # Type varbinary(14) is not supported
  # wlNotificationtimestamp: varbinary(14) @db(name: "wl_notificationtimestamp")
  # Type varbinary(255) is not supported
  # wlTitle: varbinary(255)! @db(name: "wl_title") @default(value: )
  wlUser: Int! @db(name: "wl_user")
}